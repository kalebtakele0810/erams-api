// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ERAManagementSystem.Models;

namespace ERAManagementSystem.Data
{
    public partial class CmsContext : DbContext
    {
        public CmsContext()
        {
        }

        public CmsContext(DbContextOptions<CmsContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<ActivityTypeLookup> ActivityTypeLookups { get; set; }
        public virtual DbSet<Advance> Advances { get; set; }
        public virtual DbSet<AdvertisingDate> AdvertisingDates { get; set; }
        public virtual DbSet<AdvertisingDateSpn> AdvertisingDateSpns { get; set; }
        public virtual DbSet<Altitude> Altitudes { get; set; }
        public virtual DbSet<AnalysisTypeLookup> AnalysisTypeLookups { get; set; }
        public virtual DbSet<Appraisal> Appraisals { get; set; }
        public virtual DbSet<AppraisalIndicatorsView> AppraisalIndicatorsViews { get; set; }
        public virtual DbSet<AppraisalLocationLookup> AppraisalLocationLookups { get; set; }
        public virtual DbSet<AppraisalStatusLookup> AppraisalStatusLookups { get; set; }
        public virtual DbSet<AppraiseeLookup> AppraiseeLookups { get; set; }
        public virtual DbSet<ArtifactManagementDetailLog> ArtifactManagementDetailLogs { get; set; }
        public virtual DbSet<ArtifactManagementLog> ArtifactManagementLogs { get; set; }
        public virtual DbSet<AssessedContract> AssessedContracts { get; set; }
        public virtual DbSet<AssessmentMetadatum> AssessmentMetadata { get; set; }
        public virtual DbSet<AssessmentRegisterView> AssessmentRegisterViews { get; set; }
        public virtual DbSet<AssessmentScoreLog> AssessmentScoreLogs { get; set; }
        public virtual DbSet<AssetManagementTender> AssetManagementTenders { get; set; }
        public virtual DbSet<AwardedTendersByRegion> AwardedTendersByRegions { get; set; }
        public virtual DbSet<Bid> Bids { get; set; }
        public virtual DbSet<BidBoQitem> BidBoQitems { get; set; }
        public virtual DbSet<BidDivision> BidDivisions { get; set; }
        public virtual DbSet<BidItem> BidItems { get; set; }
        public virtual DbSet<BidSeries> BidSeries { get; set; }
        public virtual DbSet<BidView> BidViews { get; set; }
        public virtual DbSet<Bidder> Bidders { get; set; }
        public virtual DbSet<BoQ> BoQs { get; set; }
        public virtual DbSet<BoQdivisionEntry> BoQdivisionEntries { get; set; }
        public virtual DbSet<BoQitemEntry> BoQitemEntries { get; set; }
        public virtual DbSet<BoQseriesEntry> BoQseriesEntries { get; set; }
        public virtual DbSet<BudetProblem> BudetProblems { get; set; }
        public virtual DbSet<CacReleasedTender> CacReleasedTenders { get; set; }
        public virtual DbSet<CacSecretaryAssignment> CacSecretaryAssignments { get; set; }
        public virtual DbSet<CacTender> CacTenders { get; set; }
        public virtual DbSet<Claim> Claims { get; set; }
        public virtual DbSet<ClaimCategory> ClaimCategories { get; set; }
        public virtual DbSet<ConstructionActivityLookup> ConstructionActivityLookups { get; set; }
        public virtual DbSet<ConsultantsPerformance> ConsultantsPerformances { get; set; }
        public virtual DbSet<ConsultantsProgram> ConsultantsPrograms { get; set; }
        public virtual DbSet<ContactDetail> ContactDetails { get; set; }
        public virtual DbSet<Contract> Contracts { get; set; }
        public virtual DbSet<ContractAssignment> ContractAssignments { get; set; }
        public virtual DbSet<ContractCategoryLookup> ContractCategoryLookups { get; set; }
        public virtual DbSet<ContractImplementer> ContractImplementers { get; set; }
        public virtual DbSet<ContractPerformanceScore> ContractPerformanceScores { get; set; }
        public virtual DbSet<ContractPhase> ContractPhases { get; set; }
        public virtual DbSet<ContractProgressAsNew> ContractProgressAsNews { get; set; }
        public virtual DbSet<ContractProgressPerformanceScore> ContractProgressPerformanceScores { get; set; }
        public virtual DbSet<ContractType> ContractTypes { get; set; }
        public virtual DbSet<ContractorProgram> ContractorPrograms { get; set; }
        public virtual DbSet<Correspondence> Correspondences { get; set; }
        public virtual DbSet<CorrespondentsLookup> CorrespondentsLookups { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<CurrencyBreakDown> CurrencyBreakDowns { get; set; }
        public virtual DbSet<CurrencyLookup> CurrencyLookups { get; set; }
        public virtual DbSet<CustomItemUnitLookup> CustomItemUnitLookups { get; set; }
        public virtual DbSet<Deliverable> Deliverables { get; set; }
        public virtual DbSet<DeliverableLookup> DeliverableLookups { get; set; }
        public virtual DbSet<Discussion> Discussions { get; set; }
        public virtual DbSet<DisputedIssue> DisputedIssues { get; set; }
        public virtual DbSet<Division> Divisions { get; set; }
        public virtual DbSet<EngineeringEstimate> EngineeringEstimates { get; set; }
        public virtual DbSet<Equipment> Equipment { get; set; }
        public virtual DbSet<EquipmentClassification> EquipmentClassifications { get; set; }
        public virtual DbSet<EquipmentCost> EquipmentCosts { get; set; }
        public virtual DbSet<EquipmentCostLocal> EquipmentCostLocals { get; set; }
        public virtual DbSet<EquipmentSubclassification> EquipmentSubclassifications { get; set; }
        public virtual DbSet<EramsBackupMetadatum> EramsBackupMetadata { get; set; }
        public virtual DbSet<EramsFlag> EramsFlags { get; set; }
        public virtual DbSet<Eraregion> Eraregions { get; set; }
        public virtual DbSet<ErrorReport> ErrorReports { get; set; }
        public virtual DbSet<EstimateByCreator> EstimateByCreators { get; set; }
        public virtual DbSet<EstimateCommitte> EstimateCommittes { get; set; }
        public virtual DbSet<EstimateView> EstimateViews { get; set; }
        public virtual DbSet<EthiopianCity> EthiopianCities { get; set; }
        public virtual DbSet<EthiopianRegion> EthiopianRegions { get; set; }
        public virtual DbSet<EvsSetting> EvsSettings { get; set; }
        public virtual DbSet<FileStorage> FileStorages { get; set; }
        public virtual DbSet<FileStorageMetadatum> FileStorageMetadata { get; set; }
        public virtual DbSet<FileUpload> FileUploads { get; set; }
        public virtual DbSet<FinancedBy> FinancedBys { get; set; }
        public virtual DbSet<FinancialInstitute> FinancialInstitutes { get; set; }
        public virtual DbSet<Firm> Firms { get; set; }
        public virtual DbSet<FundSource> FundSources { get; set; }
        public virtual DbSet<FundSourceLookup> FundSourceLookups { get; set; }
        public virtual DbSet<GlobalSetting> GlobalSettings { get; set; }
        public virtual DbSet<Guarantee> Guarantees { get; set; }
        public virtual DbSet<GuaranteeCurrencyBreakdown> GuaranteeCurrencyBreakdowns { get; set; }
        public virtual DbSet<GuaranteeType> GuaranteeTypes { get; set; }
        public virtual DbSet<HaulTypeLookup> HaulTypeLookups { get; set; }
        public virtual DbSet<Head> Heads { get; set; }
        public virtual DbSet<HistoricRate> HistoricRates { get; set; }
        public virtual DbSet<Ipc> Ipcs { get; set; }
        public virtual DbSet<Issue> Issues { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<ItemWorkMethod> ItemWorkMethods { get; set; }
        public virtual DbSet<Jco> Jcos { get; set; }
        public virtual DbSet<JcoBackup> JcoBackups { get; set; }
        public virtual DbSet<JvDetail> JvDetails { get; set; }
        public virtual DbSet<KeyStaffProgress> KeyStaffProgresses { get; set; }
        public virtual DbSet<KeyStaffRegister> KeyStaffRegisters { get; set; }
        public virtual DbSet<KeyStaffRegisterFile> KeyStaffRegisterFiles { get; set; }
        public virtual DbSet<Labour> Labours { get; set; }
        public virtual DbSet<LabourClassCode> LabourClassCodes { get; set; }
        public virtual DbSet<LabourClassification> LabourClassifications { get; set; }
        public virtual DbSet<LabourCost> LabourCosts { get; set; }
        public virtual DbSet<LabourCostLocal> LabourCostLocals { get; set; }
        public virtual DbSet<Material> Materials { get; set; }
        public virtual DbSet<MaterialCost> MaterialCosts { get; set; }
        public virtual DbSet<MaterialCostLocal> MaterialCostLocals { get; set; }
        public virtual DbSet<MaterialUnit> MaterialUnits { get; set; }
        public virtual DbSet<Measurement> Measurements { get; set; }
        public virtual DbSet<MovLookup> MovLookups { get; set; }
        public virtual DbSet<Ownership> Ownerships { get; set; }
        public virtual DbSet<PasDivisonsWeight> PasDivisonsWeights { get; set; }
        public virtual DbSet<PasFeedback> PasFeedbacks { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Phase> Phases { get; set; }
        public virtual DbSet<PhaseCurrencyBreakdown> PhaseCurrencyBreakdowns { get; set; }
        public virtual DbSet<PositionLookup> PositionLookups { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ProjectCurrencyBreakdown> ProjectCurrencyBreakdowns { get; set; }
        public virtual DbSet<ProjectFunder> ProjectFunders { get; set; }
        public virtual DbSet<ProjectPerKm> ProjectPerKms { get; set; }
        public virtual DbSet<ProjectType> ProjectTypes { get; set; }
        public virtual DbSet<Property> Properties { get; set; }
        public virtual DbSet<PropertyType> PropertyTypes { get; set; }
        public virtual DbSet<PurchaseItem> PurchaseItems { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual DbSet<QuantityChange> QuantityChanges { get; set; }
        public virtual DbSet<QuantityChangeCategory> QuantityChangeCategories { get; set; }
        public virtual DbSet<QuantityChangeSubCategory> QuantityChangeSubCategories { get; set; }
        public virtual DbSet<RateBuilderAssignment> RateBuilderAssignments { get; set; }
        public virtual DbSet<Remark> Remarks { get; set; }
        public virtual DbSet<ResponseGuideline> ResponseGuidelines { get; set; }
        public virtual DbSet<RoadProperty> RoadProperties { get; set; }
        public virtual DbSet<RoadSegmentList> RoadSegmentLists { get; set; }
        public virtual DbSet<Rsdp> Rsdps { get; set; }
        public virtual DbSet<Series> Series { get; set; }
        public virtual DbSet<Specification> Specifications { get; set; }
        public virtual DbSet<Subcity> Subcities { get; set; }
        public virtual DbSet<Supplement> Supplements { get; set; }
        public virtual DbSet<TacReleasedTender> TacReleasedTenders { get; set; }
        public virtual DbSet<TeamLeaderNote> TeamLeaderNotes { get; set; }
        public virtual DbSet<Tender> Tenders { get; set; }
        public virtual DbSet<TenderAssignment> TenderAssignments { get; set; }
        public virtual DbSet<Terrain> Terrains { get; set; }
        public virtual DbSet<TownsPassed> TownsPasseds { get; set; }
        public virtual DbSet<Training> Training { get; set; }
        public virtual DbSet<TransformedContractValue> TransformedContractValues { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<UnitMeasure> UnitMeasures { get; set; }
        public virtual DbSet<UtilContract> UtilContracts { get; set; }
        public virtual DbSet<VariationOrder> VariationOrders { get; set; }
        public virtual DbSet<VariationOrderCategory> VariationOrderCategories { get; set; }
        public virtual DbSet<VariationOrderSubcategory> VariationOrderSubcategories { get; set; }
        public virtual DbSet<Vat> Vats { get; set; }
        public virtual DbSet<VatInclusiveColumenUpdateForPawe> VatInclusiveColumenUpdateForPawes { get; set; }
        public virtual DbSet<ViewRateEquipment> ViewRateEquipments { get; set; }
        public virtual DbSet<WinningBid> WinningBids { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>(entity =>
            {
                entity.HasKey(e => e.AccountNo)
                    .HasName("PK__Accounts__349D9DFD1D409F7D");

                entity.Property(e => e.AccountNo).ValueGeneratedNever();

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityTypeLookup>(entity =>
            {
                entity.HasKey(e => e.ActitvityType);

                entity.ToTable("ActivityTypeLookup");

                entity.Property(e => e.ActitvityType).HasMaxLength(15);
            });

            modelBuilder.Entity<Advance>(entity =>
            {
                entity.ToTable("Advance");

                entity.Property(e => e.AdvanceId).HasColumnName("AdvanceID");

                entity.Property(e => e.Amount).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.LastEditedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Vat)
                    .HasColumnType("decimal(19, 4)")
                    .HasColumnName("VAT");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.Advances)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Advance_Contract");
            });

            modelBuilder.Entity<AdvertisingDate>(entity =>
            {
                entity.ToTable("AdvertisingDate");

                entity.Property(e => e.AdvertisingDateId).HasColumnName("AdvertisingDateID");

                entity.Property(e => e.AdvertisingDate1)
                    .HasColumnType("date")
                    .HasColumnName("AdvertisingDate");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.AdvertisingDates)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_AdvertisingDate_Contract");
            });

            modelBuilder.Entity<AdvertisingDateSpn>(entity =>
            {
                entity.HasKey(e => e.AdvertisingSpndateId)
                    .HasName("PK_AdvetisingDateSPN");

                entity.ToTable("AdvertisingDateSPN");

                entity.Property(e => e.AdvertisingSpndateId).HasColumnName("AdvertisingSPNDateID");

                entity.Property(e => e.AdvertisingDate).HasColumnType("date");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.AdvertisingDateSpns)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_AdvetisingDateSPN_Contract");
            });

            modelBuilder.Entity<Altitude>(entity =>
            {
                entity.ToTable("Altitude");

                entity.Property(e => e.AltitudeId).HasColumnName("AltitudeID");

                entity.Property(e => e.Altitude1)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Altitude");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.EngineeringEstimateId).HasColumnName("EngineeringEstimateID");

                entity.Property(e => e.FromKm).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ToKm).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.EngineeringEstimate)
                    .WithMany(p => p.Altitudes)
                    .HasForeignKey(d => d.EngineeringEstimateId)
                    .HasConstraintName("FK_Altitude_EngineeringEstimate");
            });

            modelBuilder.Entity<AnalysisTypeLookup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AnalysisTypeLookup");

                entity.Property(e => e.TypeCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TypeDescription)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TypeId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Appraisal>(entity =>
            {
                entity.ToTable("Appraisal");

                entity.Property(e => e.AppraisalId).HasColumnName("AppraisalID");

                entity.Property(e => e.Evaluation).HasMaxLength(50);

                entity.Property(e => e.IssueId).HasColumnName("IssueID");

                entity.Property(e => e.Paid).HasColumnName("PAID");

                entity.Property(e => e.Punctuality).HasMaxLength(50);

                entity.Property(e => e.Quality).HasMaxLength(50);

                entity.HasOne(d => d.Issue)
                    .WithMany(p => p.Appraisals)
                    .HasForeignKey(d => d.IssueId)
                    .HasConstraintName("FK_Appraisal_Issue");

                entity.HasOne(d => d.Pa)
                    .WithMany(p => p.Appraisals)
                    .HasForeignKey(d => d.Paid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Appraisal_PreEvaluation");
            });

            modelBuilder.Entity<AppraisalIndicatorsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppraisalIndicatorsView");

                entity.Property(e => e.DesignBuildBuild).HasColumnName("DesignBuild_Build");

                entity.Property(e => e.DesignBuildDesign).HasColumnName("DesignBuild_Design");

                entity.Property(e => e.DesignBuildEmployerRep).HasColumnName("DesignBuild_EmployerRep");

                entity.Property(e => e.Era1).HasColumnName("ERA1");

                entity.Property(e => e.Era2).HasColumnName("ERA2");

                entity.Property(e => e.Head).HasMaxLength(50);

                entity.Property(e => e.HeadId).HasColumnName("HeadID");

                entity.Property(e => e.Issue).HasMaxLength(50);

                entity.Property(e => e.IssueId).HasColumnName("IssueID");

                entity.Property(e => e.Keywords).HasMaxLength(50);

                entity.Property(e => e.Phase).HasMaxLength(250);

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.Reference).HasMaxLength(50);
            });

            modelBuilder.Entity<AppraisalLocationLookup>(entity =>
            {
                entity.HasKey(e => e.AppraisalLocation);

                entity.ToTable("AppraisalLocationLookup");

                entity.Property(e => e.AppraisalLocation).HasMaxLength(50);
            });

            modelBuilder.Entity<AppraisalStatusLookup>(entity =>
            {
                entity.HasKey(e => e.AppraisalStatus);

                entity.ToTable("AppraisalStatusLookup");

                entity.Property(e => e.AppraisalStatus).HasMaxLength(15);
            });

            modelBuilder.Entity<AppraiseeLookup>(entity =>
            {
                entity.HasKey(e => e.Appraisee)
                    .HasName("PK_ApraiseeLookup");

                entity.ToTable("AppraiseeLookup");

                entity.Property(e => e.Appraisee).HasMaxLength(50);
            });

            modelBuilder.Entity<ArtifactManagementDetailLog>(entity =>
            {
                entity.HasKey(e => e.LogDetailId)
                    .HasName("PK_ManagementDetailLog");

                entity.ToTable("ArtifactManagementDetailLog");

                entity.Property(e => e.LogDetailId).HasColumnName("LogDetailID");

                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.RelatedArtifactType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.HasOne(d => d.Log)
                    .WithMany(p => p.ArtifactManagementDetailLogs)
                    .HasForeignKey(d => d.LogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ArtifactManagementDetailLog_ArtifactManagementLog");
            });

            modelBuilder.Entity<ArtifactManagementLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("ArtifactManagementLog");

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.PrimaryArtifactType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<AssessedContract>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AssessedContracts");

                entity.Property(e => e.AppraisableId).HasColumnName("AppraisableID");

                entity.Property(e => e.AppraisableType).HasMaxLength(50);

                entity.Property(e => e.ContractName).IsRequired();

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractType).HasMaxLength(50);

                entity.Property(e => e.ControllingRegion).HasMaxLength(20);

                entity.Property(e => e.Paid).HasColumnName("PAID");
            });

            modelBuilder.Entity<AssessmentMetadatum>(entity =>
            {
                entity.HasKey(e => e.Paid)
                    .HasName("PK_PreEvaluation");

                entity.Property(e => e.Paid).HasColumnName("PAID");

                entity.Property(e => e.ActivityType).HasMaxLength(15);

                entity.Property(e => e.AppraisableId).HasColumnName("AppraisableID");

                entity.Property(e => e.AppraisableType).HasMaxLength(50);

                entity.Property(e => e.AppraisalStatus).HasMaxLength(15);

                entity.Property(e => e.Appraisee).HasMaxLength(50);

                entity.Property(e => e.AssessmentPeriodFrom)
                    .HasColumnType("date")
                    .HasColumnName("AssessmentPeriod_From");

                entity.Property(e => e.AssessmentPeriodTo)
                    .HasColumnType("date")
                    .HasColumnName("AssessmentPeriod_To");

                entity.Property(e => e.Assessor).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DateOfAssessment).HasColumnType("date");

                entity.Property(e => e.DateSaved)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastIssueId).HasColumnName("LastIssueID");

                entity.Property(e => e.Location).HasMaxLength(50);

                entity.Property(e => e.PerformanceAgainstPlan).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Position).HasMaxLength(50);

                entity.HasOne(d => d.ContractForStaffNavigation)
                    .WithMany(p => p.AssessmentMetadata)
                    .HasForeignKey(d => d.ContractForStaff)
                    .HasConstraintName("FK_AssessmentMetadata_ContractForStaff");

                entity.HasOne(d => d.KeyStaff)
                    .WithMany(p => p.AssessmentMetadata)
                    .HasForeignKey(d => d.KeyStaffId)
                    .HasConstraintName("FK_PreEvaluation_KeyStaffRegister");
            });

            modelBuilder.Entity<AssessmentRegisterView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AssessmentRegisterView");

                entity.Property(e => e.ActivityType).HasMaxLength(15);

                entity.Property(e => e.AppraisableType).HasMaxLength(50);

                entity.Property(e => e.AppraisalStatus).HasMaxLength(15);

                entity.Property(e => e.Appraisee).HasMaxLength(50);

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractName).IsRequired();

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ControllingRegion).HasMaxLength(20);

                entity.Property(e => e.DateOfAssessment).HasColumnType("date");

                entity.Property(e => e.DateSaved).HasColumnType("date");

                entity.Property(e => e.Epr)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("EPR");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.Mpr)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("MPR");

                entity.Property(e => e.Paid).HasColumnName("PAID");

                entity.Property(e => e.PapScore).HasColumnType("decimal(5, 2)");
            });

            modelBuilder.Entity<AssessmentScoreLog>(entity =>
            {
                entity.HasKey(e => e.Paid)
                    .HasName("PK_AssessmentOPA");

                entity.ToTable("AssessmentScoreLog");

                entity.Property(e => e.Paid)
                    .ValueGeneratedNever()
                    .HasColumnName("PAID");

                entity.Property(e => e.AggregateEpr)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("AggregateEPR");

                entity.Property(e => e.AggregateMpr)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("AggregateMPR");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.Epr)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("EPR");

                entity.Property(e => e.Mpr)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("MPR");

                entity.Property(e => e.Mypr)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("MYPR");

                entity.Property(e => e.MyprEndDate).HasColumnType("date");

                entity.Property(e => e.MyprStartDate).HasColumnType("date");

                entity.Property(e => e.Opr)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("OPR");

                entity.Property(e => e.PapDate).HasColumnType("date");

                entity.Property(e => e.PapMessage).HasMaxLength(150);

                entity.Property(e => e.PapScore).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.PunctualityScore).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.QpAssessment).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.QualityScore).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.HasOne(d => d.Pa)
                    .WithOne(p => p.AssessmentScoreLog)
                    .HasForeignKey<AssessmentScoreLog>(d => d.Paid)
                    .HasConstraintName("FK_AssessmentScoreLog_AssessmentMetadata");
            });

            modelBuilder.Entity<AssetManagementTender>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AssetManagementTenders");

                entity.Property(e => e.TenderId).HasColumnName("TenderID");
            });

            modelBuilder.Entity<AwardedTendersByRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AwardedTendersByRegion");

                entity.Property(e => e.ControllingRegion).HasMaxLength(20);

                entity.Property(e => e.TenderId).HasColumnName("TenderID");
            });

            modelBuilder.Entity<Bid>(entity =>
            {
                entity.ToTable("Bid");

                entity.Property(e => e.BidId).HasColumnName("BidID");

                entity.Property(e => e.BidderId).HasColumnName("BidderID");

                entity.Property(e => e.BillDescription).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.EngineeringEstimateId).HasColumnName("EngineeringEstimateID");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.TenderId).HasColumnName("TenderID");

                entity.HasOne(d => d.Bidder)
                    .WithMany(p => p.Bids)
                    .HasForeignKey(d => d.BidderId)
                    .HasConstraintName("FK_Quotation_Bidder");

                entity.HasOne(d => d.EngineeringEstimate)
                    .WithMany(p => p.Bids)
                    .HasForeignKey(d => d.EngineeringEstimateId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Quotation_EngineeringEstimate");

                entity.HasOne(d => d.Tender)
                    .WithMany(p => p.Bids)
                    .HasForeignKey(d => d.TenderId)
                    .HasConstraintName("FK_Quotation_Tender");
            });

            modelBuilder.Entity<BidBoQitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BidBoQItems");

                entity.Property(e => e.BidItemId).HasColumnName("BidItemID");

                entity.Property(e => e.ContractorRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EngineeringEstimateId).HasColumnName("EngineeringEstimateID");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ItemDescription).HasMaxLength(250);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.NewQuantity).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OriginalQuantity).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TenderId).HasColumnName("TenderID");
            });

            modelBuilder.Entity<BidDivision>(entity =>
            {
                entity.ToTable("BidDivision");

                entity.Property(e => e.BidDivisionId).HasColumnName("BidDivisionID");

                entity.Property(e => e.BidSeriesId).HasColumnName("BidSeriesID");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.DivisionCode).HasMaxLength(50);

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.SpecificationName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.BidSeries)
                    .WithMany(p => p.BidDivisions)
                    .HasForeignKey(d => d.BidSeriesId)
                    .HasConstraintName("FK_QuotationDivisionEntry_QuotationSeriesEntry");

                entity.HasOne(d => d.Division)
                    .WithMany(p => p.BidDivisions)
                    .HasForeignKey(d => new { d.DivisionCode, d.SpecificationName })
                    .HasConstraintName("FK_BidDivison_Division");
            });

            modelBuilder.Entity<BidItem>(entity =>
            {
                entity.ToTable("BidItem");

                entity.Property(e => e.BidItemId).HasColumnName("BidItemID");

                entity.Property(e => e.BidDivisionId).HasColumnName("BidDivisionID");

                entity.Property(e => e.ContractorRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CustomItemCode).HasMaxLength(50);

                entity.Property(e => e.DiscountedRate).HasColumnType("money");

                entity.Property(e => e.IsSps).HasColumnName("IsSPS");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.NewQuantity).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OriginalQuantity).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.BidDivision)
                    .WithMany(p => p.BidItems)
                    .HasForeignKey(d => d.BidDivisionId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_QuotationItemEntry_QuotationDivisionEntry");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.BidItems)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_QuotationItemEntry_Item");
            });

            modelBuilder.Entity<BidSeries>(entity =>
            {
                entity.Property(e => e.BidSeriesId).HasColumnName("BidSeriesID");

                entity.Property(e => e.BidId).HasColumnName("BidID");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.SeriesCode).HasMaxLength(50);

                entity.Property(e => e.SpecificationName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Bid)
                    .WithMany(p => p.BidSeries)
                    .HasForeignKey(d => d.BidId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_QuotationSeriesEntry_Quotation");

                entity.HasOne(d => d.S)
                    .WithMany(p => p.BidSeries)
                    .HasForeignKey(d => new { d.SeriesCode, d.SpecificationName })
                    .HasConstraintName("FK_BidSeries_Series");
            });

            modelBuilder.Entity<BidView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BidView");

                entity.Property(e => e.BidItemId).HasColumnName("BidItemID");

                entity.Property(e => e.Contingency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ContractorRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EngineeringEstimateId).HasColumnName("EngineeringEstimateID");

                entity.Property(e => e.IsSps).HasColumnName("IsSPS");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemRateIncludesVat).HasColumnName("ItemRateIncludesVAT");

                entity.Property(e => e.ItemSpec)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NewQuantity).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OriginalQuantity).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PsCode).HasColumnName("PS_Code");

                entity.Property(e => e.SeriesDescription).HasMaxLength(100);

                entity.Property(e => e.SeriesSpec)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TenderId).HasColumnName("TenderID");

                entity.Property(e => e.UnitMeasure).HasMaxLength(50);

                entity.Property(e => e.Vat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VAT");
            });

            modelBuilder.Entity<Bidder>(entity =>
            {
                entity.ToTable("Bidder");

                entity.Property(e => e.BidderId).HasColumnName("BidderID");

                entity.Property(e => e.BidAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Contingency).HasColumnType("money");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.Dayworks).HasColumnType("money");

                entity.Property(e => e.DiscountRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FirmId).HasColumnName("FirmID");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.Sps)
                    .HasColumnType("money")
                    .HasColumnName("SPS");

                entity.Property(e => e.TenderId).HasColumnName("TenderID");

                entity.Property(e => e.TotalofBills).HasColumnType("money");

                entity.Property(e => e.Vat)
                    .HasColumnType("money")
                    .HasColumnName("VAT");

                entity.HasOne(d => d.Firm)
                    .WithMany(p => p.Bidders)
                    .HasForeignKey(d => d.FirmId)
                    .HasConstraintName("FK_Bidder_Firm");

                entity.HasOne(d => d.Tender)
                    .WithMany(p => p.Bidders)
                    .HasForeignKey(d => d.TenderId)
                    .HasConstraintName("FK_Bidder_Tender");
            });

            modelBuilder.Entity<BoQ>(entity =>
            {
                entity.ToTable("BoQ");

                entity.Property(e => e.BoQid).HasColumnName("BoQID");

                entity.Property(e => e.BillDescription).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.EngineeringEstimateId).HasColumnName("EngineeringEstimateID");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.HasOne(d => d.EngineeringEstimate)
                    .WithMany(p => p.BoQs)
                    .HasForeignKey(d => d.EngineeringEstimateId)
                    .HasConstraintName("FK_BoQ_EngineeringEstimate");
            });

            modelBuilder.Entity<BoQdivisionEntry>(entity =>
            {
                entity.ToTable("BoQDivisionEntry");

                entity.Property(e => e.BoQdivisionEntryId).HasColumnName("BoQDivisionEntryID");

                entity.Property(e => e.BoQseriesEntryId).HasColumnName("BoQSeriesEntryID");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.DivisionCode).HasMaxLength(50);

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.SpecificationName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.BoQseriesEntry)
                    .WithMany(p => p.BoQdivisionEntries)
                    .HasForeignKey(d => d.BoQseriesEntryId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BoQDivisionEntry_BoQSeriesEntry");

                entity.HasOne(d => d.Division)
                    .WithMany(p => p.BoQdivisionEntries)
                    .HasForeignKey(d => new { d.DivisionCode, d.SpecificationName })
                    .HasConstraintName("FK_BoQDivisionEntry_Division");
            });

            modelBuilder.Entity<BoQitemEntry>(entity =>
            {
                entity.ToTable("BoQItemEntry");

                entity.Property(e => e.BoQitemEntryId).HasColumnName("BoQItemEntryID");

                entity.Property(e => e.BoQdivisionEntryId).HasColumnName("BoQDivisionEntryID");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.IsSps).HasColumnName("IsSPS");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RateDecrypted)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Rate_Decrypted");

                entity.Property(e => e.RateEncrypted)
                    .HasMaxLength(128)
                    .HasColumnName("Rate_Encrypted");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.HasOne(d => d.BoQdivisionEntry)
                    .WithMany(p => p.BoQitemEntries)
                    .HasForeignKey(d => d.BoQdivisionEntryId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BoQItemEntry_BoQDivisionEntry");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.BoQitemEntries)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_BoQItemEntry_Item");
            });

            modelBuilder.Entity<BoQseriesEntry>(entity =>
            {
                entity.ToTable("BoQSeriesEntry");

                entity.Property(e => e.BoQseriesEntryId).HasColumnName("BoQSeriesEntryID");

                entity.Property(e => e.BoQid).HasColumnName("BoQID");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.SeriesCode).HasMaxLength(50);

                entity.Property(e => e.SpecificationName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.BoQ)
                    .WithMany(p => p.BoQseriesEntries)
                    .HasForeignKey(d => d.BoQid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BoQSeriesEntry_BoQ");

                entity.HasOne(d => d.S)
                    .WithMany(p => p.BoQseriesEntries)
                    .HasForeignKey(d => new { d.SeriesCode, d.SpecificationName })
                    .HasConstraintName("FK_BoQSeriesEntry_Series");
            });

            modelBuilder.Entity<BudetProblem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Budet Problem");

                entity.Property(e => e.Budget).HasColumnType("money");

                entity.Property(e => e.ContractId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ContractID");

                entity.Property(e => e.ContractName).IsRequired();

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractType).HasMaxLength(50);

                entity.Property(e => e.EngineeringEstimateId).HasColumnName("EngineeringEstimateID");

                entity.Property(e => e.FinancialBidOpeningDate).HasColumnType("date");

                entity.Property(e => e.FinancialEvaluationApprovalDate).HasColumnType("date");

                entity.Property(e => e.InvitedBidders).HasMaxLength(50);

                entity.Property(e => e.SubmittedEqPq).HasColumnName("Submitted_EQ_PQ");
            });

            modelBuilder.Entity<CacReleasedTender>(entity =>
            {
                entity.HasKey(e => e.ReleaseId)
                    .HasName("PK_ReleasedTenders");

                entity.ToTable("CacReleasedTender");

                entity.Property(e => e.ReleaseId).HasColumnName("ReleaseID");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.DateReleased).HasColumnType("datetime");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.MinuteReference).HasMaxLength(100);

                entity.Property(e => e.ReleasedBy).HasMaxLength(256);

                entity.Property(e => e.TenderId).HasColumnName("TenderID");

                entity.Property(e => e.TenderValue).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.CacSelectedBidderNavigation)
                    .WithMany(p => p.CacReleasedTenders)
                    .HasForeignKey(d => d.CacSelectedBidder)
                    .HasConstraintName("FK_ReleasedTenders_Bidder");

                entity.HasOne(d => d.Tender)
                    .WithMany(p => p.CacReleasedTenders)
                    .HasForeignKey(d => d.TenderId)
                    .HasConstraintName("FK_ReleasedTenders_Tender");
            });

            modelBuilder.Entity<CacSecretaryAssignment>(entity =>
            {
                entity.HasKey(e => e.AssignmentId);

                entity.ToTable("CacSecretaryAssignment");

                entity.Property(e => e.AssignmentId).HasColumnName("AssignmentID");

                entity.Property(e => e.AssignedBy).HasMaxLength(256);

                entity.Property(e => e.AssignedTo).HasMaxLength(256);

                entity.Property(e => e.AssignmentDate).HasColumnType("datetime");

                entity.Property(e => e.AssignmentRevocationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CacTender>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CacTenders");

                entity.Property(e => e.TenderId).HasColumnName("TenderID");
            });

            modelBuilder.Entity<Claim>(entity =>
            {
                entity.ToTable("Claim");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.ArbitratorDecision).HasColumnType("money");

                entity.Property(e => e.ClaimNumber).HasMaxLength(100);

                entity.Property(e => e.ClaimOrDetermination).HasMaxLength(15);

                entity.Property(e => e.ContractClause).HasMaxLength(255);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractorEstimatedAdditionalCost).HasColumnType("money");

                entity.Property(e => e.ContractorOrEra)
                    .HasMaxLength(10)
                    .HasColumnName("ContractorOrERA");

                entity.Property(e => e.CostOrTime).HasMaxLength(10);

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DateDreApproved).HasColumnType("date");

                entity.Property(e => e.DateErApproved).HasColumnType("date");

                entity.Property(e => e.DreEstimatedAdditionalCost).HasColumnType("money");

                entity.Property(e => e.DretimeExtension).HasColumnName("DRETimeExtension");

                entity.Property(e => e.ErEstimatedAdditionalCost).HasColumnType("money");

                entity.Property(e => e.EraestimatedAdditionalCost)
                    .HasColumnType("money")
                    .HasColumnName("ERAEstimatedAdditionalCost");

                entity.Property(e => e.EratimeExtension).HasColumnName("ERATimeExtension");

                entity.Property(e => e.ErtimeExtension).HasColumnName("ERTimeExtension");

                entity.Property(e => e.IsReferedToDre).HasColumnName("IsReferedToDRE");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ReasonForIssue).HasMaxLength(255);

                entity.Property(e => e.RelatedVo).HasColumnName("RelatedVO");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.Claims)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_Claim_Contract");

                entity.HasOne(d => d.ReasonForIssueNavigation)
                    .WithMany(p => p.Claims)
                    .HasForeignKey(d => d.ReasonForIssue)
                    .HasConstraintName("FK_Claim_ClaimCategory");

                entity.HasOne(d => d.RelatedVoNavigation)
                    .WithMany(p => p.Claims)
                    .HasForeignKey(d => d.RelatedVo)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Claim_VariationOrder");
            });

            modelBuilder.Entity<ClaimCategory>(entity =>
            {
                entity.HasKey(e => e.ClaimCategory1)
                    .HasName("PK_ClaimCategory_1");

                entity.ToTable("ClaimCategory");

                entity.Property(e => e.ClaimCategory1)
                    .HasMaxLength(255)
                    .HasColumnName("ClaimCategory");

                entity.Property(e => e.TypeofClaim).HasMaxLength(10);
            });

            modelBuilder.Entity<ConstructionActivityLookup>(entity =>
            {
                entity.HasKey(e => e.ConstructionActitvity)
                    .HasName("PK_ConstructionActitvityLookup");

                entity.ToTable("ConstructionActivityLookup");

                entity.Property(e => e.ConstructionActitvity).HasMaxLength(255);
            });

            modelBuilder.Entity<ConsultantsPerformance>(entity =>
            {
                entity.HasIndex(e => e.ContractId, "IX_ConsultantsPerformances_ContractId");

                entity.HasIndex(e => e.DeliverableId, "IX_ConsultantsPerformances_DeliverableId");

                entity.Property(e => e.MonetaryValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PercentComplete).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ConsultantsPerformances)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_ConsultantsPerformances_Contracts_ContractId");

                entity.HasOne(d => d.Deliverable)
                    .WithMany(p => p.ConsultantsPerformances)
                    .HasForeignKey(d => d.DeliverableId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ConsultantsProgram>(entity =>
            {
                entity.HasIndex(e => e.ContractId, "IX_ConsultantsPrograms_ContractId");

                entity.HasIndex(e => e.DeliverableId, "IX_ConsultantsPrograms_DeliverableId");

                entity.Property(e => e.MonetaryValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PercentComplete).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ConsultantsPrograms)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConsultantsPrograms_Contracts_ContractId");

                entity.HasOne(d => d.Deliverable)
                    .WithMany(p => p.ConsultantsPrograms)
                    .HasForeignKey(d => d.DeliverableId);
            });

            modelBuilder.Entity<ContactDetail>(entity =>
            {
                entity.ToTable("ContactDetail");

                entity.Property(e => e.ContactDetailId).HasColumnName("ContactDetailID");

                entity.Property(e => e.AssignmentDate).HasColumnType("date");

                entity.Property(e => e.ContactType).HasMaxLength(10);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.KeyStaffId).HasColumnName("KeyStaffID");

                entity.Property(e => e.Landline).HasMaxLength(50);

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.LeavingDate).HasColumnType("date");

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.Position).HasMaxLength(50);

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ContactDetails)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_ContactDetail_Contract");

                entity.HasOne(d => d.KeyStaff)
                    .WithMany(p => p.ContactDetails)
                    .HasForeignKey(d => d.KeyStaffId)
                    .HasConstraintName("FK_ContactDetail_KeyStaffRegister");
            });

            modelBuilder.Entity<Contract>(entity =>
            {
                entity.ToTable("Contract");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ActualCompletionDate).HasColumnType("date");

                entity.Property(e => e.ActualEndOfDefectsLiability).HasColumnType("date");

                entity.Property(e => e.AdvanceAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Budget).HasColumnType("money");

                entity.Property(e => e.CapacityBuilding).HasMaxLength(255);

                entity.Property(e => e.Contingency).HasColumnType("money");

                entity.Property(e => e.ContractCommencement).HasColumnType("date");

                entity.Property(e => e.ContractName).IsRequired();

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractSignedOn).HasColumnType("date");

                entity.Property(e => e.ContractType).HasMaxLength(50);

                entity.Property(e => e.ControllingRegion).HasMaxLength(20);

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CreatingDirectorate).HasMaxLength(50);

                entity.Property(e => e.Dayworks).HasColumnType("money");

                entity.Property(e => e.DesignContractId).HasColumnName("DesignContractID");

                entity.Property(e => e.EngineeringEstimateId).HasColumnName("EngineeringEstimateID");

                entity.Property(e => e.EqPqOpeningDate)
                    .HasColumnType("date")
                    .HasColumnName("EQ_PQ_OpeningDate");

                entity.Property(e => e.FinancialBidOpeningDate).HasColumnType("date");

                entity.Property(e => e.FinancialEvaluationApprovalDate).HasColumnType("date");

                entity.Property(e => e.HandoverDate).HasColumnType("date");

                entity.Property(e => e.InactivityReason).HasMaxLength(255);

                entity.Property(e => e.InvitedBidders).HasMaxLength(50);

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MultipleVariationOrderLimitInPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OneTimeVariationOrderLimit).HasColumnType("money");

                entity.Property(e => e.OriginalContractAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProcurementAssignmentDate).HasColumnType("date");

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

                entity.Property(e => e.Sps)
                    .HasColumnType("money")
                    .HasColumnName("SPS");

                entity.Property(e => e.SubmittedEqPq).HasColumnName("Submitted_EQ_PQ");

                entity.Property(e => e.TotalofBills).HasColumnType("money");

                entity.Property(e => e.Vat)
                    .HasColumnType("money")
                    .HasColumnName("VAT");

                entity.Property(e => e.VatRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WorkContractId).HasColumnName("WorkContractID");

                entity.HasOne(d => d.ContractTypeNavigation)
                    .WithMany(p => p.Contracts)
                    .HasForeignKey(d => d.ContractType)
                    .HasConstraintName("FK_Contract_ContractType");

                entity.HasOne(d => d.ContractorNavigation)
                    .WithMany(p => p.Contracts)
                    .HasForeignKey(d => d.Contractor)
                    .HasConstraintName("FK_Contract_Firm");

                entity.HasOne(d => d.DesignContract)
                    .WithMany(p => p.InverseDesignContract)
                    .HasForeignKey(d => d.DesignContractId)
                    .HasConstraintName("FK_Contract_Contract");

                entity.HasOne(d => d.EngineeringEstimate)
                    .WithMany(p => p.Contracts)
                    .HasForeignKey(d => d.EngineeringEstimateId)
                    .HasConstraintName("FK_Contract_EngineeringEstimate");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Contracts)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Contract_Project");

                entity.HasOne(d => d.WorkContract)
                    .WithMany(p => p.InverseWorkContract)
                    .HasForeignKey(d => d.WorkContractId)
                    .HasConstraintName("FK_Contract_Contract1");
            });

            modelBuilder.Entity<ContractAssignment>(entity =>
            {
                entity.HasKey(e => e.AssignmentId);

                entity.ToTable("ContractAssignment");

                entity.Property(e => e.AssignmentId).HasColumnName("AssignmentID");

                entity.Property(e => e.AssignedBy).HasMaxLength(256);

                entity.Property(e => e.AssignedTo).HasMaxLength(256);

                entity.Property(e => e.AssignmentDate).HasColumnType("datetime");

                entity.Property(e => e.AssignmentRevocationDate).HasColumnType("datetime");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ReassignmentDate).HasColumnType("datetime");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ContractAssignments)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractAssignment_Contract");
            });

            modelBuilder.Entity<ContractCategoryLookup>(entity =>
            {
                entity.HasKey(e => e.ContractCategoryLookup1);

                entity.ToTable("ContractCategoryLookup");

                entity.Property(e => e.ContractCategoryLookup1)
                    .HasMaxLength(50)
                    .HasColumnName("ContractCategoryLookup");
            });

            modelBuilder.Entity<ContractImplementer>(entity =>
            {
                entity.HasKey(e => e.DirectorateId);

                entity.ToTable("ContractImplementer");

                entity.Property(e => e.DirectorateId).HasColumnName("DirectorateID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Directorate)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ContractImplementers)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractImplementer_Contract");
            });

            modelBuilder.Entity<ContractPerformanceScore>(entity =>
            {
                entity.HasKey(e => new { e.ContractId, e.PreEvaluationId });

                entity.ToTable("ContractPerformanceScore");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.PreEvaluationId).HasColumnName("PreEvaluationID");

                entity.Property(e => e.PapMeasurementDate).HasColumnType("date");

                entity.Property(e => e.PapMessage).HasMaxLength(150);

                entity.Property(e => e.PapScore).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PerformanceRating).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PunctualityScore).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.QualityScore).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ContractPhase>(entity =>
            {
                entity.HasIndex(e => e.ContractId, "IX_ContractPhases_ContractId");

                entity.HasIndex(e => e.ContractPhaseId, "IX_ContractPhases_ContractPhaseId");

                entity.HasIndex(e => e.ReplacedSupplementId, "IX_ContractPhases_ReplacedSupplementId");

                entity.HasIndex(e => e.SupplementId, "IX_ContractPhases_SupplementId");

                entity.Property(e => e.AdvanceAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AdvancePercent).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Description).IsRequired();

                entity.Property(e => e.LumpSum).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Name).IsRequired();

                entity.Property(e => e.ProvisionalSum).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Reimbursable).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ContractPhases)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_ContractPhases_Contracts_ContractId");

                entity.HasOne(d => d.ContractPhaseNavigation)
                    .WithMany(p => p.InverseContractPhaseNavigation)
                    .HasForeignKey(d => d.ContractPhaseId);

                entity.HasOne(d => d.ReplacedSupplement)
                    .WithMany(p => p.ContractPhaseReplacedSupplements)
                    .HasForeignKey(d => d.ReplacedSupplementId);

                entity.HasOne(d => d.Supplement)
                    .WithMany(p => p.ContractPhaseSupplements)
                    .HasForeignKey(d => d.SupplementId);
            });

            modelBuilder.Entity<ContractProgressAsNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ContractProgressAsNew");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractProgres).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ContractProgressId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ContractProgressID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.WorksProgress).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ContractProgressPerformanceScore>(entity =>
            {
                entity.HasKey(e => e.Ppid);

                entity.ToTable("ContractProgressPerformanceScore");

                entity.Property(e => e.Ppid).HasColumnName("PPid");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.MeasurementId).HasColumnName("MeasurementID");

                entity.Property(e => e.ProgressPerformance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProgressPerformanceMessage).HasMaxLength(150);

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ContractProgressPerformanceScores)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_ContractProgressPerformanceScore_Contract");

                entity.HasOne(d => d.Measurement)
                    .WithMany(p => p.ContractProgressPerformanceScores)
                    .HasForeignKey(d => d.MeasurementId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ContractProgressPerformanceScore_Measurement");
            });

            modelBuilder.Entity<ContractType>(entity =>
            {
                entity.HasKey(e => e.ContractType1);

                entity.ToTable("ContractType");

                entity.Property(e => e.ContractType1)
                    .HasMaxLength(50)
                    .HasColumnName("ContractType");

                entity.Property(e => e.Category).HasMaxLength(50);
            });

            modelBuilder.Entity<ContractorProgram>(entity =>
            {
                entity.HasKey(e => e.ProgramId);

                entity.ToTable("ContractorProgram");

                entity.Property(e => e.ProgramId).HasColumnName("ProgramID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Tag)
                    .HasMaxLength(5)
                    .IsFixedLength();

                entity.Property(e => e.Type).HasMaxLength(20);

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ContractorPrograms)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_ContractorProgram_Contract");
            });

            modelBuilder.Entity<Correspondence>(entity =>
            {
                entity.ToTable("Correspondence");

                entity.Property(e => e.CorrespondenceId).HasColumnName("CorrespondenceID");

                entity.Property(e => e.ClaimId).HasColumnName("ClaimID");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.From).HasMaxLength(50);

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Reference).HasMaxLength(50);

                entity.Property(e => e.To).HasMaxLength(50);

                entity.Property(e => e.VariationOrderId).HasColumnName("VariationOrderID");

                entity.HasOne(d => d.Claim)
                    .WithMany(p => p.Correspondences)
                    .HasForeignKey(d => d.ClaimId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Correspondence_Claim");

                entity.HasOne(d => d.VariationOrder)
                    .WithMany(p => p.Correspondences)
                    .HasForeignKey(d => d.VariationOrderId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Correspondence_VariationOrder");
            });

            modelBuilder.Entity<CorrespondentsLookup>(entity =>
            {
                entity.HasKey(e => e.Correspondents);

                entity.ToTable("CorrespondentsLookup");

                entity.Property(e => e.Correspondents).HasMaxLength(50);
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.HasKey(e => e.CountryName)
                    .HasName("Country$PrimaryKey");

                entity.ToTable("Country");

                entity.Property(e => e.CountryName).HasMaxLength(255);
            });

            modelBuilder.Entity<CurrencyBreakDown>(entity =>
            {
                entity.ToTable("CurrencyBreakDown");

                entity.Property(e => e.CurrencyBreakDownId).HasColumnName("CurrencyBreakDownID");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Currency).HasMaxLength(20);

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.CurrencyBreakDowns)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_CurrencyBreakDown_Contract");
            });

            modelBuilder.Entity<CurrencyLookup>(entity =>
            {
                entity.HasKey(e => e.CurrencyId)
                    .HasName("CurrencyType$PrimaryKey");

                entity.ToTable("CurrencyLookup");

                entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");

                entity.Property(e => e.CurrencyName).HasMaxLength(255);

                entity.Property(e => e.CurrencySign).HasMaxLength(255);
            });

            modelBuilder.Entity<CustomItemUnitLookup>(entity =>
            {
                entity.HasKey(e => e.CustomItemUnit);

                entity.ToTable("CustomItemUnitLookup");

                entity.Property(e => e.CustomItemUnit).HasMaxLength(50);

                entity.Property(e => e.ItemUnitDescription).HasMaxLength(250);
            });

            modelBuilder.Entity<Deliverable>(entity =>
            {
                entity.HasIndex(e => e.ContractId, "IX_Deliverables_ContractId");

                entity.HasIndex(e => e.ContractPhaseId, "IX_Deliverables_ContractPhaseId");

                entity.HasIndex(e => e.DeliverableLookupId, "IX_Deliverables_DeliverableLookupId");

                entity.Property(e => e.MonetaryValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PhasePercentage).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.Deliverables)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_Deliverables_Contracts_ContractId");

                entity.HasOne(d => d.ContractPhase)
                    .WithMany(p => p.Deliverables)
                    .HasForeignKey(d => d.ContractPhaseId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.DeliverableLookup)
                    .WithMany(p => p.Deliverables)
                    .HasForeignKey(d => d.DeliverableLookupId);
            });

            modelBuilder.Entity<DeliverableLookup>(entity =>
            {
                entity.Property(e => e.Description).IsRequired();
            });

            modelBuilder.Entity<Discussion>(entity =>
            {
                entity.ToTable("Discussion");

                entity.Property(e => e.DiscussionId).HasColumnName("DiscussionID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.Point).IsRequired();

                entity.Property(e => e.UserDirectorate)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserPosition)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.Discussions)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Discussion_Contract");
            });

            modelBuilder.Entity<DisputedIssue>(entity =>
            {
                entity.ToTable("DisputedIssue");

                entity.Property(e => e.DisputedIssueId).HasColumnName("DisputedIssueID");

                entity.Property(e => e.IssueId).HasColumnName("IssueID");

                entity.Property(e => e.Paid).HasColumnName("PAID");

                entity.Property(e => e.Reference).HasMaxLength(50);

                entity.HasOne(d => d.Issue)
                    .WithMany(p => p.DisputedIssues)
                    .HasForeignKey(d => d.IssueId)
                    .HasConstraintName("FK_DisputedIssue_Issue");

                entity.HasOne(d => d.Pa)
                    .WithMany(p => p.DisputedIssues)
                    .HasForeignKey(d => d.Paid)
                    .HasConstraintName("FK_DisputedIssue_AssessmentMetadata");
            });

            modelBuilder.Entity<Division>(entity =>
            {
                entity.HasKey(e => new { e.DivisionCode, e.SpecificationName })
                    .HasName("PK_tbl_USR_Division_1");

                entity.ToTable("Division");

                entity.Property(e => e.DivisionCode).HasMaxLength(50);

                entity.Property(e => e.SpecificationName).HasMaxLength(50);

                entity.Property(e => e.DivisionDescription).HasMaxLength(200);

                entity.Property(e => e.SeriesCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.S)
                    .WithMany(p => p.Divisions)
                    .HasForeignKey(d => new { d.SeriesCode, d.SpecificationName })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Division_Series");
            });

            modelBuilder.Entity<EngineeringEstimate>(entity =>
            {
                entity.ToTable("EngineeringEstimate");

                entity.HasIndex(e => e.Description, "IX_EngineeringEstimate")
                    .IsUnique();

                entity.Property(e => e.EngineeringEstimateId).HasColumnName("EngineeringEstimateID");

                entity.Property(e => e.ApprovedBy).HasMaxLength(256);

                entity.Property(e => e.ApprovedReversedBy).HasMaxLength(256);

                entity.Property(e => e.BidType).HasMaxLength(255);

                entity.Property(e => e.BridgeLength).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Climate).HasMaxLength(255);

                entity.Property(e => e.Contingency).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CulvertLength).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DateOfEstimate).HasColumnType("date");

                entity.Property(e => e.DerivedEstimateName).HasMaxLength(255);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DesignContractId).HasColumnName("DesignContractID");

                entity.Property(e => e.DesignStandard).HasMaxLength(255);

                entity.Property(e => e.DesignTrafficVolume).HasMaxLength(255);

                entity.Property(e => e.DistanceFromAddisAbaba).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EndPlace).HasMaxLength(255);

                entity.Property(e => e.EndRegion).HasMaxLength(255);

                entity.Property(e => e.FormOfContract).HasMaxLength(255);

                entity.Property(e => e.FunctionalClassification).HasMaxLength(255);

                entity.Property(e => e.HaulAggregateToBitumenPlant).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HaulAggregateToConcretePrecastSite).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HaulAggregateToPlacing).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HaulBitumenToPlacing).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HaulCementToSite).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HaulConcreteToBridges).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HaulEarthWorkToPlacing).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HaulGravelToPlacing).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HaulPrecastConcreteMaterialToPlacing).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HaulSandToSite).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HaulSelectedEarthworksToPlacing).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HaulSiteWonSandToPlacing).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Hqoverhead)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("HQOverhead");

                entity.Property(e => e.ItemRateIncludesVat).HasColumnName("ItemRateIncludesVAT");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MaximumSpanLenght).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MultipleVariationOrderLimitInPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OneTimeVariationOrderLimit).HasColumnType("money");

                entity.Property(e => e.Profit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Risk).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RoadNumber).HasMaxLength(255);

                entity.Property(e => e.SiteOverhead).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SpecificationForm).HasMaxLength(50);

                entity.Property(e => e.StartPlace).HasMaxLength(255);

                entity.Property(e => e.StartRegion).HasMaxLength(255);

                entity.Property(e => e.TrafficVolume).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Vat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VAT");

                entity.HasOne(d => d.DesignContract)
                    .WithMany(p => p.EngineeringEstimates)
                    .HasForeignKey(d => d.DesignContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EngineeringEstimate_Contract");
            });

            modelBuilder.Entity<Equipment>(entity =>
            {
                entity.Property(e => e.EquipmentId).HasColumnName("EquipmentID");

                entity.Property(e => e.Classification).HasMaxLength(255);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.EfficiencyFactor).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EquipmentInitialCost).HasColumnType("money");

                entity.Property(e => e.EquipmentType).HasMaxLength(255);

                entity.Property(e => e.FuelConsumptionFactor).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HourlyRate).HasColumnType("money");

                entity.Property(e => e.HourlyRatePlusOperationalCost).HasColumnType("money");

                entity.Property(e => e.HourlyRentalRate).HasColumnType("money");

                entity.Property(e => e.Hp).HasColumnName("HP");

                entity.Property(e => e.InsuranceRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LabourId).HasColumnName("LabourID");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Note).HasMaxLength(1500);

                entity.Property(e => e.RatedCapacity).HasMaxLength(25);

                entity.Property(e => e.RepairCostFactor).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SalvageRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ServiceCostFactor).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Subclassification).HasMaxLength(255);

                entity.Property(e => e.TruckCapacity).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TyreSetPrice).HasColumnType("money");

                entity.HasOne(d => d.ClassificationNavigation)
                    .WithMany(p => p.Equipment)
                    .HasForeignKey(d => d.Classification)
                    .HasConstraintName("FK_Equipment_EquipmentClassification");

                entity.HasOne(d => d.Labour)
                    .WithMany(p => p.Equipment)
                    .HasForeignKey(d => d.LabourId)
                    .HasConstraintName("FK_Equipment_Labour");
            });

            modelBuilder.Entity<EquipmentClassification>(entity =>
            {
                entity.HasKey(e => e.Classification);

                entity.ToTable("EquipmentClassification");

                entity.Property(e => e.Classification).HasMaxLength(255);
            });

            modelBuilder.Entity<EquipmentCost>(entity =>
            {
                entity.HasKey(e => e.PlantCostId);

                entity.ToTable("EquipmentCost");

                entity.Property(e => e.Activity).HasMaxLength(50);

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EquipmentId).HasColumnName("EquipmentID");

                entity.Property(e => e.HaulType).HasMaxLength(80);

                entity.Property(e => e.HauledMaterialId).HasColumnName("HauledMaterialID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.Note).HasMaxLength(1500);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Equipment)
                    .WithMany(p => p.EquipmentCosts)
                    .HasForeignKey(d => d.EquipmentId)
                    .HasConstraintName("FK_EquipmentCost_Equipment");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.EquipmentCosts)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_EquipmentCost_Item");

                entity.HasOne(d => d.MaterialCost)
                    .WithMany(p => p.EquipmentCosts)
                    .HasForeignKey(d => d.MaterialCostId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_EquipmentCost_MaterialCost");
            });

            modelBuilder.Entity<EquipmentCostLocal>(entity =>
            {
                entity.HasKey(e => e.PlantCostId)
                    .HasName("PK_PlantLocalProduction");

                entity.ToTable("EquipmentCostLocal");

                entity.Property(e => e.Activity).HasMaxLength(50);

                entity.Property(e => e.Cost).HasColumnType("money");

                entity.Property(e => e.HaulType).HasMaxLength(80);

                entity.Property(e => e.HauledMaterialId).HasColumnName("HauledMaterialID");

                entity.Property(e => e.MaterialId).HasColumnName("MaterialID");

                entity.Property(e => e.Note).HasMaxLength(1500);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.EquipmentTypeNavigation)
                    .WithMany(p => p.EquipmentCostLocals)
                    .HasForeignKey(d => d.EquipmentType)
                    .HasConstraintName("FK_EquipmentCostLocal_Equipment");

                entity.HasOne(d => d.MaterialCost)
                    .WithMany(p => p.EquipmentCostLocals)
                    .HasForeignKey(d => d.MaterialCostId)
                    .HasConstraintName("FK_EquipmentCostLocal_MaterialCostLocal");

                entity.HasOne(d => d.Material)
                    .WithMany(p => p.EquipmentCostLocals)
                    .HasForeignKey(d => d.MaterialId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_EquipmentCostLocal_Material");
            });

            modelBuilder.Entity<EquipmentSubclassification>(entity =>
            {
                entity.HasKey(e => e.Subclassification);

                entity.ToTable("EquipmentSubclassification");

                entity.Property(e => e.Subclassification).HasMaxLength(255);
            });

            modelBuilder.Entity<EramsBackupMetadatum>(entity =>
            {
                entity.HasKey(e => e.EramsBackupId)
                    .HasName("PK_EramsBackup");

                entity.Property(e => e.EramsBackupId).HasColumnName("EramsBackupID");

                entity.Property(e => e.BackupName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.PhysicalLocation)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<EramsFlag>(entity =>
            {
                entity.HasKey(e => e.FlagId)
                    .HasName("PK_Flag");

                entity.ToTable("EramsFlag");

                entity.Property(e => e.FlagId).HasColumnName("FlagID");
            });

            modelBuilder.Entity<Eraregion>(entity =>
            {
                entity.HasKey(e => e.Eraregions);

                entity.ToTable("ERARegion");

                entity.Property(e => e.Eraregions)
                    .HasMaxLength(20)
                    .HasColumnName("ERARegions");
            });

            modelBuilder.Entity<ErrorReport>(entity =>
            {
                entity.HasKey(e => e.ErrorId);

                entity.Property(e => e.ErrorId).HasColumnName("ErrorID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractType).HasMaxLength(50);

                entity.Property(e => e.ControllingRegion).HasMaxLength(50);

                entity.Property(e => e.PhoneNo).HasMaxLength(50);

                entity.Property(e => e.Position).HasMaxLength(50);

                entity.Property(e => e.ProblemMoudle).HasMaxLength(50);

                entity.Property(e => e.ReportedBy).HasMaxLength(50);

                entity.Property(e => e.ReportedDate).HasColumnType("date");

                entity.Property(e => e.UserId).HasMaxLength(50);

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ErrorReports)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_ErrorReports_Contract1");
            });

            modelBuilder.Entity<EstimateByCreator>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EstimateByCreator");

                entity.Property(e => e.CreatingDirectorate).HasMaxLength(50);

                entity.Property(e => e.EngineeringEstimateId).HasColumnName("EngineeringEstimateID");
            });

            modelBuilder.Entity<EstimateCommitte>(entity =>
            {
                entity.HasIndex(e => e.ProjectPerKmId, "IX_EstimateCommittes_ProjectPerKmId");

                entity.HasOne(d => d.ProjectPerKm)
                    .WithMany(p => p.EstimateCommittes)
                    .HasForeignKey(d => d.ProjectPerKmId);
            });

            modelBuilder.Entity<EstimateView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EstimateView");

                entity.Property(e => e.BoQitemEntryId).HasColumnName("BoQItemEntryID");

                entity.Property(e => e.EngineeringEstimateId).HasColumnName("EngineeringEstimateID");

                entity.Property(e => e.IsSps).HasColumnName("IsSPS");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ItemDescription).HasMaxLength(1000);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemSpec)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PlacingPerformanceRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PsCode).HasColumnName("PS_Code");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RateEncrypted)
                    .HasMaxLength(128)
                    .HasColumnName("Rate_Encrypted");

                entity.Property(e => e.SeriesDescription).HasMaxLength(100);

                entity.Property(e => e.SeriesSpec)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UnitMeasure).HasMaxLength(50);
            });

            modelBuilder.Entity<EthiopianCity>(entity =>
            {
                entity.HasKey(e => e.City)
                    .HasName("EthiopianCity$PrimaryKey");

                entity.ToTable("EthiopianCity");

                entity.Property(e => e.City).HasMaxLength(255);

                entity.Property(e => e.Region).HasMaxLength(255);
            });

            modelBuilder.Entity<EthiopianRegion>(entity =>
            {
                entity.HasKey(e => e.Region)
                    .HasName("EthiopianRegion$PrimaryKey");

                entity.ToTable("EthiopianRegion");

                entity.Property(e => e.Region).HasMaxLength(255);
            });

            modelBuilder.Entity<EvsSetting>(entity =>
            {
                entity.HasKey(e => e.SettingId);

                entity.ToTable("EvsSetting");

                entity.Property(e => e.SettingId).HasColumnName("SettingID");

                entity.Property(e => e.Above1200).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Above1800).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Above2000Turbo).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Above2400).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Above3000).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Above3000Turbo).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Above3500Turbo).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Above4000Turbo).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Above600).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.BasicSalaryAridFactor).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Below2000Turbo).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Below600).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DistanceFromAa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("DistanceFromAA");

                entity.Property(e => e.FuelPrice).HasColumnType("money");

                entity.Property(e => e.FuelPriceAddisAbaba).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FuelPriceAfar).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FuelPriceAmhara).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FuelPriceBenishangulGumuz).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FuelPriceDireDawa).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FuelPriceGambela).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FuelPriceHarari).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FuelPriceOromia).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FuelPriceSnnp)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("FuelPriceSNNP");

                entity.Property(e => e.FuelPriceSomali).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FuelPriceTigray).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HaulAggregateToBitumenPlant).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.HaulAggregateToConcretePrecastSite).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.HaulAggregateToPlacing).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.HaulBitumenToPlacing).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.HaulCementToSite).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.HaulConcreteToBridges).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.HaulEarthworkToPlacingOrSpoil).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.HaulGravelToPlacing).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.HaulPrecastConcreteMaterialToPlacing).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.HaulSandToSite).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.HaulSelectedEarthworksToPlacing).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.HaulSiteWonSandToPlacing).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.HqOverhead).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.LabourIIndex)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("LabourI_Index");

                entity.Property(e => e.LabourIndex).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.LabourIndexArid).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.LabourIndexMms).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MaximumKm).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.MaximumKph).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.MinimumKm).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.MinimumKph).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Profit).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Risk).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.SiteOverhead).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.StandardSpeed).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.TerrainFactorEscrapment).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.TerrainFactorFlat).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.TerrainFactorHilly).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.TerrainFactorMountainous).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.TruckLoadUnloadTime).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.WorkingDays).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.WorkingDaysMms).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.WorkingHoursPerDay).HasColumnType("decimal(5, 2)");
            });

            modelBuilder.Entity<FileStorage>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("File_PK");

                entity.ToTable("FileStorage");

                entity.HasIndex(e => e.DocumentFileId, "UQ__FileStor__3C5688B62176D992")
                    .IsUnique();

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.DocumentFile).IsRequired();

                entity.Property(e => e.DocumentFileId).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.FileStorages)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("FK_FileStorage_FileStorageMetadata");
            });

            modelBuilder.Entity<FileStorageMetadatum>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("PK_SpecSupportFile");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.ContentType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.DateCreated)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OwnerId).HasColumnName("OwnerID");

                entity.Property(e => e.OwnerType)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FileUpload>(entity =>
            {
                entity.HasIndex(e => e.OwnershipId, "IX_FileUploads_OwnershipId");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.Ownership)
                    .WithMany(p => p.FileUploads)
                    .HasForeignKey(d => d.OwnershipId);
            });

            modelBuilder.Entity<FinancedBy>(entity =>
            {
                entity.ToTable("financedBys");

                entity.Property(e => e.FinancedById).HasColumnName("financedById");

                entity.Property(e => e.FinancedByname).HasColumnName("financedByname");

                entity.Property(e => e.NoofDateExpected).HasColumnName("noofDateExpected");
            });

            modelBuilder.Entity<FinancialInstitute>(entity =>
            {
                entity.ToTable("FinancialInstitute");

                entity.Property(e => e.FinancialInstituteId).HasColumnName("FinancialInstituteID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<Firm>(entity =>
            {
                entity.ToTable("Firm");

                entity.Property(e => e.FirmId).HasColumnName("FirmID");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.ConstructionLicenseNo).HasMaxLength(50);

                entity.Property(e => e.CountryofOrigin).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.FirmType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Pobox)
                    .HasMaxLength(50)
                    .HasColumnName("POBox");

                entity.Property(e => e.Region).HasMaxLength(50);

                entity.Property(e => e.RegisteredCapital).HasColumnType("money");

                entity.Property(e => e.Subcity).HasMaxLength(50);

                entity.Property(e => e.Telephone).HasMaxLength(50);

                entity.Property(e => e.Tin)
                    .HasMaxLength(20)
                    .HasColumnName("TIN");

                entity.Property(e => e.Vatno)
                    .HasMaxLength(20)
                    .HasColumnName("VATNo");

                entity.Property(e => e.Website).HasMaxLength(50);

                entity.Property(e => e.Wereda).HasMaxLength(50);
            });

            modelBuilder.Entity<FundSource>(entity =>
            {
                entity.ToTable("FundSource");

                entity.Property(e => e.FundSourceId).HasColumnName("FundSourceID");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.EngineeringEstimateId).HasColumnName("EngineeringEstimateID");

                entity.Property(e => e.FundSource1)
                    .HasMaxLength(255)
                    .HasColumnName("FundSource");

                entity.Property(e => e.FundType).HasMaxLength(50);

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.HasOne(d => d.EngineeringEstimate)
                    .WithMany(p => p.FundSources)
                    .HasForeignKey(d => d.EngineeringEstimateId)
                    .HasConstraintName("FK_FundSource_EngineeringEstimate");

                entity.HasOne(d => d.FundSource1Navigation)
                    .WithMany(p => p.FundSources)
                    .HasForeignKey(d => d.FundSource1)
                    .HasConstraintName("FK_FundSource_FundSourceLookup");
            });

            modelBuilder.Entity<FundSourceLookup>(entity =>
            {
                entity.HasKey(e => e.FundSource);

                entity.ToTable("FundSourceLookup");

                entity.Property(e => e.FundSource).HasMaxLength(255);
            });

            modelBuilder.Entity<GlobalSetting>(entity =>
            {
                entity.HasKey(e => e.SettingId);

                entity.Property(e => e.SettingId)
                    .ValueGeneratedNever()
                    .HasColumnName("SettingID");

                entity.Property(e => e.ContingencyRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<Guarantee>(entity =>
            {
                entity.ToTable("Guarantee");

                entity.Property(e => e.GuaranteeId).HasColumnName("GuaranteeID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.FinancialInstituteId).HasColumnName("FinancialInstituteID");

                entity.Property(e => e.GuaranteeAmountEtb)
                    .HasColumnType("money")
                    .HasColumnName("GuaranteeAmountETB");

                entity.Property(e => e.GuaranteeType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastEditedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Remark).HasMaxLength(256);

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.Guarantees)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Guarantee_Contract");

                entity.HasOne(d => d.FinancialInstitute)
                    .WithMany(p => p.Guarantees)
                    .HasForeignKey(d => d.FinancialInstituteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Guarantee_FinancialInstitute");

                entity.HasOne(d => d.GuaranteeTypeNavigation)
                    .WithMany(p => p.Guarantees)
                    .HasForeignKey(d => d.GuaranteeType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Guarantee_GuaranteeType");

                entity.HasOne(d => d.ParentNavigation)
                    .WithMany(p => p.InverseParentNavigation)
                    .HasForeignKey(d => d.Parent)
                    .HasConstraintName("FK_Guarantee_Guarantee");
            });

            modelBuilder.Entity<GuaranteeCurrencyBreakdown>(entity =>
            {
                entity.ToTable("GuaranteeCurrencyBreakdown");

                entity.Property(e => e.GuaranteeCurrencyBreakDownId).HasColumnName("GuaranteeCurrencyBreakDownID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GuaranteeId).HasColumnName("GuaranteeID");

                entity.Property(e => e.LastEditedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.HasOne(d => d.Guarantee)
                    .WithMany(p => p.GuaranteeCurrencyBreakdowns)
                    .HasForeignKey(d => d.GuaranteeId)
                    .HasConstraintName("FK_GuaranteeCurrencyBreakDown_Guarantee");
            });

            modelBuilder.Entity<GuaranteeType>(entity =>
            {
                entity.HasKey(e => e.Type);

                entity.ToTable("GuaranteeType");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<HaulTypeLookup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HaulTypeLookup");

                entity.Property(e => e.HaulType)
                    .IsRequired()
                    .HasMaxLength(80);
            });

            modelBuilder.Entity<Head>(entity =>
            {
                entity.ToTable("Head");

                entity.Property(e => e.HeadId).HasColumnName("HeadID");

                entity.Property(e => e.Head1)
                    .HasMaxLength(50)
                    .HasColumnName("Head");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.HasOne(d => d.Phase)
                    .WithMany(p => p.Heads)
                    .HasForeignKey(d => d.PhaseId)
                    .HasConstraintName("FK_Head_Phase");
            });

            modelBuilder.Entity<HistoricRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HistoricRate");

                entity.Property(e => e.BidItemId).HasColumnName("BidItemID");

                entity.Property(e => e.ContractType).HasMaxLength(50);

                entity.Property(e => e.ContractorRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ControllingRegion).HasMaxLength(20);

                entity.Property(e => e.EngineeringEstimateId).HasColumnName("EngineeringEstimateID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.ItemRateIncludesVat).HasColumnName("ItemRateIncludesVAT");

                entity.Property(e => e.TenderId).HasColumnName("TenderID");

                entity.Property(e => e.TenderIssueDate).HasColumnType("datetime");

                entity.Property(e => e.Vat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VAT");
            });

            modelBuilder.Entity<Ipc>(entity =>
            {
                entity.ToTable("IPC");

                entity.Property(e => e.Ipcid).HasColumnName("IPCID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.FirstIpcdate)
                    .HasColumnType("date")
                    .HasColumnName("FirstIPCDate");

                entity.Property(e => e.LastIpcdate)
                    .HasColumnType("date")
                    .HasColumnName("LastIPCDate");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.Ipcs)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_IPC_Contract");
            });

            modelBuilder.Entity<Issue>(entity =>
            {
                entity.ToTable("Issue");

                entity.Property(e => e.IssueId).HasColumnName("IssueID");

                entity.Property(e => e.AppliesTo)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.AppraisableType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DesignBuildBuild).HasColumnName("DesignBuild_Build");

                entity.Property(e => e.DesignBuildDesign).HasColumnName("DesignBuild_Design");

                entity.Property(e => e.DesignBuildEmployerRep).HasColumnName("DesignBuild_EmployerRep");

                entity.Property(e => e.Era1).HasColumnName("ERA1");

                entity.Property(e => e.Era2).HasColumnName("ERA2");

                entity.Property(e => e.HeadId).HasColumnName("HeadID");

                entity.Property(e => e.Issue1)
                    .HasMaxLength(50)
                    .HasColumnName("Issue");

                entity.Property(e => e.Keywords).HasMaxLength(50);

                entity.Property(e => e.Reference).HasMaxLength(50);
            });

            modelBuilder.Entity<Item>(entity =>
            {
                entity.ToTable("Item");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DivisionCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ItemDescription).HasMaxLength(1000);

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Note).HasMaxLength(1500);

                entity.Property(e => e.ParentItemCode).HasMaxLength(50);

                entity.Property(e => e.PlacingPerformanceRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PsCode).HasColumnName("PS_Code");

                entity.Property(e => e.SpecificationName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UnitMeasure).HasMaxLength(50);

                entity.Property(e => e.UnitRate).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.UnitMeasureNavigation)
                    .WithMany(p => p.Items)
                    .HasForeignKey(d => d.UnitMeasure)
                    .HasConstraintName("FK_Item_UnitMeasure");

                entity.HasOne(d => d.Division)
                    .WithMany(p => p.Items)
                    .HasForeignKey(d => new { d.DivisionCode, d.SpecificationName })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Item_Division");
            });

            modelBuilder.Entity<ItemWorkMethod>(entity =>
            {
                entity.HasKey(e => e.MethodId);

                entity.ToTable("ItemWorkMethod");

                entity.Property(e => e.MethodId).HasColumnName("MethodID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.WorkMethod).HasMaxLength(500);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemWorkMethods)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_ItemWorkMethod_Item");
            });

            modelBuilder.Entity<Jco>(entity =>
            {
                entity.ToTable("Jco");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.HiredDate)
                    .HasColumnName("hiredDate")
                    .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                entity.Property(e => e.LastPaidDate).HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            });

            modelBuilder.Entity<JcoBackup>(entity =>
            {
                entity.ToTable("JcoBackup");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.HiredDate).HasColumnName("hiredDate");

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            });

            modelBuilder.Entity<JvDetail>(entity =>
            {
                entity.HasKey(e => e.EntryId);

                entity.ToTable("JV_Detail");

                entity.Property(e => e.EntryId).HasColumnName("EntryID");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FirmId).HasColumnName("FirmID");

                entity.Property(e => e.PartnerId).HasColumnName("PartnerID");

                entity.HasOne(d => d.Firm)
                    .WithMany(p => p.JvDetails)
                    .HasForeignKey(d => d.FirmId)
                    .HasConstraintName("FK_JV_Detail_Firm");
            });

            modelBuilder.Entity<KeyStaffProgress>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("KeyStaffProgress");

                entity.Property(e => e.AssignmentProgress).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AssignmentProgressDate).HasColumnType("datetime");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.StaffId).HasColumnName("StaffID");

                entity.Property(e => e.StaffProgressId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<KeyStaffRegister>(entity =>
            {
                entity.HasKey(e => e.StaffId)
                    .HasName("PK_KeyStaffName");

                entity.ToTable("KeyStaffRegister");

                entity.Property(e => e.StaffId).HasColumnName("StaffID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.FullName).HasMaxLength(256);

                entity.Property(e => e.IdNumber).HasMaxLength(50);

                entity.Property(e => e.IdType).HasMaxLength(50);

                entity.Property(e => e.Landline).HasMaxLength(50);

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Mobile).HasMaxLength(50);
            });

            modelBuilder.Entity<KeyStaffRegisterFile>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.StaffFileId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("StaffFileID");

                entity.Property(e => e.StaffId).HasColumnName("StaffID");
            });

            modelBuilder.Entity<Labour>(entity =>
            {
                entity.ToTable("Labour");

                entity.Property(e => e.LabourId).HasColumnName("LabourID");

                entity.Property(e => e.Classification).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.IndexedHourlyRate).HasColumnType("money");

                entity.Property(e => e.LaborClassCode).HasMaxLength(10);

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MonthlyAvgSalary).HasColumnType("numeric(8, 2)");

                entity.Property(e => e.Note).HasMaxLength(1500);

                entity.Property(e => e.SalaryGrade).HasMaxLength(50);

                entity.Property(e => e.Trade).HasMaxLength(50);

                entity.HasOne(d => d.ClassificationNavigation)
                    .WithMany(p => p.Labours)
                    .HasForeignKey(d => d.Classification)
                    .HasConstraintName("FK_Labour_LabourClassification");

                entity.HasOne(d => d.LaborClassCodeNavigation)
                    .WithMany(p => p.Labours)
                    .HasForeignKey(d => d.LaborClassCode)
                    .HasConstraintName("FK_Labour_LabourClassCode");
            });

            modelBuilder.Entity<LabourClassCode>(entity =>
            {
                entity.HasKey(e => e.ClassCode);

                entity.ToTable("LabourClassCode");

                entity.Property(e => e.ClassCode).HasMaxLength(10);
            });

            modelBuilder.Entity<LabourClassification>(entity =>
            {
                entity.HasKey(e => e.Classification);

                entity.ToTable("LabourClassification");

                entity.Property(e => e.Classification).HasMaxLength(50);
            });

            modelBuilder.Entity<LabourCost>(entity =>
            {
                entity.ToTable("LabourCost");

                entity.Property(e => e.Activity).HasMaxLength(50);

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HauledMaterialId).HasColumnName("HauledMaterialID");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.LabourId).HasColumnName("LabourID");

                entity.Property(e => e.Note).HasMaxLength(1500);

                entity.Property(e => e.OperatedEquipmentCostId).HasColumnName("OperatedEquipmentCostID");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.LabourCosts)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_LabourCost_Item");

                entity.HasOne(d => d.Labour)
                    .WithMany(p => p.LabourCosts)
                    .HasForeignKey(d => d.LabourId)
                    .HasConstraintName("FK_LabourCost_Labour");

                entity.HasOne(d => d.OperatedEquipmentCost)
                    .WithMany(p => p.LabourCosts)
                    .HasForeignKey(d => d.OperatedEquipmentCostId)
                    .HasConstraintName("FK_LabourCost_EquipmentCost");
            });

            modelBuilder.Entity<LabourCostLocal>(entity =>
            {
                entity.HasKey(e => e.LabourCostId)
                    .HasName("PK_LabourLocal");

                entity.ToTable("LabourCostLocal");

                entity.Property(e => e.Activity).HasMaxLength(50);

                entity.Property(e => e.Cost).HasColumnType("money");

                entity.Property(e => e.HauledMaterialId).HasColumnName("HauledMaterialID");

                entity.Property(e => e.MaterialId).HasColumnName("MaterialID");

                entity.Property(e => e.Note).HasMaxLength(1500);

                entity.Property(e => e.OperatedEquipmentCostId).HasColumnName("OperatedEquipmentCostID");

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Material)
                    .WithMany(p => p.LabourCostLocals)
                    .HasForeignKey(d => d.MaterialId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_LabourCostLocal_Material");

                entity.HasOne(d => d.OperatedEquipmentCost)
                    .WithMany(p => p.LabourCostLocals)
                    .HasForeignKey(d => d.OperatedEquipmentCostId)
                    .HasConstraintName("FK_LabourCostLocal_EquipmentCostLocal");

                entity.HasOne(d => d.TradeNavigation)
                    .WithMany(p => p.LabourCostLocals)
                    .HasForeignKey(d => d.Trade)
                    .HasConstraintName("FK_LabourCostLocal_Labour");
            });

            modelBuilder.Entity<Material>(entity =>
            {
                entity.ToTable("Material");

                entity.Property(e => e.MaterialId).HasColumnName("MaterialID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Group).HasMaxLength(50);

                entity.Property(e => e.HaulSource).HasMaxLength(20);

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.LoadingUnloading).HasColumnType("numeric(5, 2)");

                entity.Property(e => e.MaterialDescription).HasMaxLength(250);

                entity.Property(e => e.MaterialUnit).HasMaxLength(50);

                entity.Property(e => e.Note).HasMaxLength(1500);

                entity.Property(e => e.ProductionRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PurchasePrice).HasColumnType("numeric(8, 2)");

                entity.Property(e => e.QuantityPerTruck).HasColumnType("numeric(8, 2)");

                entity.Property(e => e.Rate).HasColumnType("money");

                entity.Property(e => e.TruckCapacity).HasColumnType("numeric(8, 2)");

                entity.Property(e => e.TruckRent).HasColumnType("numeric(8, 2)");

                entity.Property(e => e.TruckTravelDistance).HasColumnType("numeric(8, 2)");

                entity.Property(e => e.TruckTravelHour).HasColumnType("numeric(5, 2)");
            });

            modelBuilder.Entity<MaterialCost>(entity =>
            {
                entity.ToTable("MaterialCost");

                entity.Property(e => e.Activity).HasMaxLength(50);

                entity.Property(e => e.BulgeFactor).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.MaterialId).HasColumnName("MaterialID");

                entity.Property(e => e.Note).HasMaxLength(1500);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.MaterialCosts)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_MaterialCost_Item");

                entity.HasOne(d => d.Material)
                    .WithMany(p => p.MaterialCosts)
                    .HasForeignKey(d => d.MaterialId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_MaterialCost_Material");
            });

            modelBuilder.Entity<MaterialCostLocal>(entity =>
            {
                entity.HasKey(e => e.MaterialCostId);

                entity.ToTable("MaterialCostLocal");

                entity.Property(e => e.Activity).HasMaxLength(50);

                entity.Property(e => e.BulgeFactor).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ChildMaterialId).HasColumnName("ChildMaterialID");

                entity.Property(e => e.Cost).HasColumnType("money");

                entity.Property(e => e.MainMaterialFkid).HasColumnName("MainMaterialFKID");

                entity.Property(e => e.Note).HasMaxLength(1500);

                entity.Property(e => e.Quantity).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.ChildMaterial)
                    .WithMany(p => p.MaterialCostLocals)
                    .HasForeignKey(d => d.ChildMaterialId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_MaterialCostLocal_Material");
            });

            modelBuilder.Entity<MaterialUnit>(entity =>
            {
                entity.HasKey(e => e.Unit);

                entity.ToTable("MaterialUnit");

                entity.Property(e => e.Unit).HasMaxLength(50);
            });

            modelBuilder.Entity<Measurement>(entity =>
            {
                entity.ToTable("Measurement");

                entity.Property(e => e.MeasurementId).HasColumnName("MeasurementID");

                entity.Property(e => e.AdvanceRepayment).HasColumnType("money");

                entity.Property(e => e.CertifiedClaims).HasColumnType("money");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CorrectionOnCertificate).HasColumnType("money");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CriticalActivities).HasMaxLength(255);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Escalation).HasColumnType("money");

                entity.Property(e => e.ExpenditureVsBudget).HasColumnType("money");

                entity.Property(e => e.InterestOnLatePayments).HasColumnType("money");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MeasurementAndVos)
                    .HasColumnType("money")
                    .HasColumnName("MeasurementAndVOs");

                entity.Property(e => e.OtherPayments).HasColumnType("money");

                entity.Property(e => e.Taxes).HasColumnType("money");

                entity.Property(e => e.TotalRetention).HasColumnType("money");

                entity.Property(e => e.VatThisInvoice).HasColumnType("money");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.Measurements)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_Measurement_Contract");
            });

            modelBuilder.Entity<MovLookup>(entity =>
            {
                entity.HasKey(e => e.MoVid);

                entity.ToTable("MovLookup");

                entity.Property(e => e.MoVid).HasColumnName("MoVID");

                entity.Property(e => e.LookupId).HasColumnName("LookupID");
            });

            modelBuilder.Entity<Ownership>(entity =>
            {
                entity.ToTable("Ownership");

                entity.HasIndex(e => e.ProjectPerKmId, "IX_Ownership_ProjectPerKmId");

                entity.HasOne(d => d.ProjectPerKm)
                    .WithMany(p => p.Ownerships)
                    .HasForeignKey(d => d.ProjectPerKmId);
            });

            modelBuilder.Entity<PasDivisonsWeight>(entity =>
            {
                entity.HasKey(e => e.PasWeightId)
                    .HasName("PK_PasDivisonWeight");

                entity.ToTable("PasDivisonsWeight");

                entity.Property(e => e.PasWeightId).HasColumnName("PasWeightID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Design).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Era)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ERA");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.Supervision).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Works).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Phase)
                    .WithMany(p => p.PasDivisonsWeights)
                    .HasForeignKey(d => d.PhaseId)
                    .HasConstraintName("FK_PasDivisonWeight_Phase");
            });

            modelBuilder.Entity<PasFeedback>(entity =>
            {
                entity.HasKey(e => e.FeedBackId);

                entity.ToTable("PasFeedback");

                entity.Property(e => e.FeedBackId).HasColumnName("FeedBackID");

                entity.Property(e => e.CommentBy).HasMaxLength(256);

                entity.Property(e => e.CommentDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Payment>(entity =>
            {
                entity.HasIndex(e => e.ProjectId, "IX_Payments_ProjectID");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CounterAccount).HasColumnName("counterAccount");

                entity.Property(e => e.DateRecived).HasColumnName("dateRecived");

                entity.Property(e => e.DateReturn).HasColumnName("dateReturn");

                entity.Property(e => e.DateToprocess).HasColumnName("dateToprocess");

                entity.Property(e => e.FinancedBy).HasColumnName("financedBy");

                entity.Property(e => e.Ipcinv).HasColumnName("ipcinv");

                entity.Property(e => e.Paidstatus).HasColumnName("paidstatus");

                entity.Property(e => e.PayDate).HasColumnName("payDate");

                entity.Property(e => e.PayeTo).HasColumnName("payeTo");

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

                entity.Property(e => e.Region).HasColumnName("region");

                entity.Property(e => e.Remark).HasColumnName("remark");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Team).HasColumnName("team");

                entity.Property(e => e.TeamLeader).HasColumnName("teamLeader");

                entity.Property(e => e.Type).HasColumnName("type");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.ProjectId);
            });

            modelBuilder.Entity<Phase>(entity =>
            {
                entity.ToTable("Phase");

                entity.Property(e => e.PhaseId).HasColumnName("PhaseID");

                entity.Property(e => e.Phase1)
                    .HasMaxLength(250)
                    .HasColumnName("Phase");
            });

            modelBuilder.Entity<PhaseCurrencyBreakdown>(entity =>
            {
                entity.HasIndex(e => e.ContractPhaseId, "IX_PhaseCurrencyBreakdowns_ContractPhaseId");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.ContractPhase)
                    .WithMany(p => p.PhaseCurrencyBreakdowns)
                    .HasForeignKey(d => d.ContractPhaseId);
            });

            modelBuilder.Entity<PositionLookup>(entity =>
            {
                entity.HasKey(e => e.Position)
                    .HasName("PK_PositionLookup_1");

                entity.ToTable("PositionLookup");

                entity.Property(e => e.Position).HasMaxLength(50);
            });

            modelBuilder.Entity<Project>(entity =>
            {
                entity.ToTable("Project");

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CreatingDirectorate).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.DueDate).HasColumnType("date");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(250);

                entity.Property(e => e.Number).HasMaxLength(50);

                entity.Property(e => e.RoadLength).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Rsdp)
                    .HasMaxLength(50)
                    .HasColumnName("RSDP");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.HasOne(d => d.RsdpNavigation)
                    .WithMany(p => p.Projects)
                    .HasForeignKey(d => d.Rsdp)
                    .HasConstraintName("FK_Project_RSDP");
            });

            modelBuilder.Entity<ProjectCurrencyBreakdown>(entity =>
            {
                entity.ToTable("ProjectCurrencyBreakdown");

                entity.Property(e => e.ProjectCurrencyBreakDownId).HasColumnName("ProjectCurrencyBreakDownID");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Currency).HasMaxLength(20);

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjectCurrencyBreakdowns)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_CurrencyBreakDown_Project");
            });

            modelBuilder.Entity<ProjectFunder>(entity =>
            {
                entity.Property(e => e.ProjectFunderId).HasColumnName("ProjectFunderID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FundSource).HasMaxLength(255);

                entity.Property(e => e.FundType).HasMaxLength(50);

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

                entity.HasOne(d => d.FundSourceNavigation)
                    .WithMany(p => p.ProjectFunders)
                    .HasForeignKey(d => d.FundSource)
                    .HasConstraintName("FK_ProjectFunders_FundSourceLookup");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjectFunders)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_ProjectFunders_Project");
            });

            modelBuilder.Entity<ProjectPerKm>(entity =>
            {
                entity.ToTable("ProjectPerKm");

                entity.HasIndex(e => e.ProjectId, "IX_ProjectPerKm_ProjectID");

                entity.Property(e => e.KmEnd).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Kmstart)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("KMStart");

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjectPerKms)
                    .HasForeignKey(d => d.ProjectId);
            });

            modelBuilder.Entity<ProjectType>(entity =>
            {
                entity.HasKey(e => e.Project)
                    .HasName("Project$PrimaryKey");

                entity.ToTable("ProjectType");

                entity.Property(e => e.Project).HasMaxLength(255);
            });

            modelBuilder.Entity<Property>(entity =>
            {
                entity.ToTable("Property");

                entity.HasIndex(e => e.OwnershipId, "IX_Property_OwnershipId");

                entity.Property(e => e.SinglePrice).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Ownership)
                    .WithMany(p => p.Properties)
                    .HasForeignKey(d => d.OwnershipId);
            });

            modelBuilder.Entity<PropertyType>(entity =>
            {
                entity.ToTable("PropertyType");
            });

            modelBuilder.Entity<PurchaseItem>(entity =>
            {
                entity.HasKey(e => e.ItemNo);

                entity.ToTable("PurchaseItem");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Article)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ClassCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ImbNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PurchaseNo).HasColumnName("purchaseNo");

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<PurchaseOrder>(entity =>
            {
                entity.HasKey(e => e.PurchaseNo);

                entity.ToTable("PurchaseOrder");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Cff)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Directorate)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Nb)
                    .IsUnicode(false)
                    .HasColumnName("nb");

                entity.Property(e => e.OrderDate).HasColumnType("date");

                entity.Property(e => e.Over80000).IsUnicode(false);

                entity.Property(e => e.PurchasedTo).IsUnicode(false);

                entity.Property(e => e.Reff)
                    .IsUnicode(false)
                    .HasColumnName("reff");

                entity.Property(e => e.RequestingUnit)
                    .HasMaxLength(700)
                    .IsUnicode(false);

                entity.Property(e => e.ShippingDate).HasColumnType("date");

                entity.Property(e => e.ShippingMark).IsUnicode(false);

                entity.Property(e => e.Terms)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Under80000).IsUnicode(false);
            });

            modelBuilder.Entity<QuantityChange>(entity =>
            {
                entity.HasKey(e => e.QuantityChange1)
                    .HasName("PK_QuantityChangeLineItem");

                entity.ToTable("QuantityChange");

                entity.Property(e => e.QuantityChange1).HasColumnName("QuantityChange");

                entity.Property(e => e.Category).HasMaxLength(255);

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.EstimatedAdditionalCost).HasColumnType("money");

                entity.Property(e => e.EstimatedAdditionalQuantity).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ItemCode).HasMaxLength(50);

                entity.Property(e => e.ItemId).HasColumnName("ItemID");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PercentageAboveOriginal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PercentageAboveOriginalContractAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Subcategory).HasMaxLength(255);

                entity.HasOne(d => d.CategoryNavigation)
                    .WithMany(p => p.QuantityChanges)
                    .HasForeignKey(d => d.Category)
                    .HasConstraintName("FK_QuantityChange_QuantityChangeCategory");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.QuantityChanges)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_QuantityChange_Contract");
            });

            modelBuilder.Entity<QuantityChangeCategory>(entity =>
            {
                entity.HasKey(e => e.Category)
                    .HasName("PK_QuantityChangeCategory_1");

                entity.ToTable("QuantityChangeCategory");

                entity.Property(e => e.Category).HasMaxLength(255);
            });

            modelBuilder.Entity<QuantityChangeSubCategory>(entity =>
            {
                entity.HasKey(e => e.SubCategoryId);

                entity.ToTable("QuantityChangeSubCategory");

                entity.Property(e => e.SubCategoryId).HasColumnName("SubCategoryID");

                entity.Property(e => e.Category).HasMaxLength(255);

                entity.Property(e => e.SubCategory).HasMaxLength(255);

                entity.HasOne(d => d.CategoryNavigation)
                    .WithMany(p => p.QuantityChangeSubCategories)
                    .HasForeignKey(d => d.Category)
                    .HasConstraintName("FK_QuantityChangeSubCategory_QuantityChangeCategory");
            });

            modelBuilder.Entity<RateBuilderAssignment>(entity =>
            {
                entity.HasKey(e => e.AssignmentId);

                entity.ToTable("RateBuilderAssignment");

                entity.Property(e => e.AssignmentId).HasColumnName("AssignmentID");

                entity.Property(e => e.AssignedBy).HasMaxLength(256);

                entity.Property(e => e.AssignedTo).HasMaxLength(256);

                entity.Property(e => e.AssignmentDate).HasColumnType("datetime");

                entity.Property(e => e.AssignmentRevocationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Remark>(entity =>
            {
                entity.ToTable("remarks");

                entity.Property(e => e.RemarkId).HasColumnName("remarkId");

                entity.Property(e => e.RemarkName).HasColumnName("remarkName");
            });

            modelBuilder.Entity<ResponseGuideline>(entity =>
            {
                entity.HasKey(e => e.IssueId);

                entity.ToTable("ResponseGuideline");

                entity.Property(e => e.IssueId)
                    .ValueGeneratedNever()
                    .HasColumnName("IssueID");

                entity.HasOne(d => d.Issue)
                    .WithOne(p => p.ResponseGuideline)
                    .HasForeignKey<ResponseGuideline>(d => d.IssueId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ResponseGuideline_Issue");
            });

            modelBuilder.Entity<RoadProperty>(entity =>
            {
                entity.ToTable("RoadProperty");

                entity.Property(e => e.RoadPropertyId).HasColumnName("RoadPropertyID");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.EngineeringEstimateId).HasColumnName("EngineeringEstimateID");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.LeftParkingLaneWidth).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LeftWalkwayWidth).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Length).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RightParkingLaneWidth).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RightWalkwayWidth).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ShoulderWidth).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SurfaceType).HasMaxLength(50);

                entity.Property(e => e.Width).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.EngineeringEstimate)
                    .WithMany(p => p.RoadProperties)
                    .HasForeignKey(d => d.EngineeringEstimateId)
                    .HasConstraintName("FK_RoadProperty_EngineeringEstimate");
            });

            modelBuilder.Entity<RoadSegmentList>(entity =>
            {
                entity.HasKey(e => e.RnmdId)
                    .HasName("PK_RoadSegmentLists_1");

                entity.Property(e => e.RnmdId).HasColumnName("rnmdId");

                entity.Property(e => e.Asphaltlength).HasColumnName("asphaltlength");

                entity.Property(e => e.DsStandard).HasColumnName("ds_Standard");

                entity.Property(e => e.Gravellength).HasColumnName("gravellength");

                entity.Property(e => e.GtpPlan).HasColumnName("gtpPlan");

                entity.Property(e => e.Region).HasColumnName("region");

                entity.Property(e => e.RegistraionYear)
                    .HasColumnType("datetime")
                    .HasColumnName("registraion_year");

                entity.Property(e => e.Rnmd).HasColumnName("rnmd");

                entity.Property(e => e.RoadClass).HasColumnName("roadClass");

                entity.Property(e => e.RoadNo).HasColumnName("roadNo");

                entity.Property(e => e.Roadstatus).HasColumnName("roadstatus");

                entity.Property(e => e.Section).HasColumnName("section");

                entity.Property(e => e.SegmentName).HasColumnName("segmentName");

                entity.Property(e => e.SegmentNo).HasColumnName("segmentNo");

                entity.Property(e => e.Totallength).HasColumnName("totallength");
            });

            modelBuilder.Entity<Rsdp>(entity =>
            {
                entity.HasKey(e => e.Rsdp1);

                entity.ToTable("RSDP");

                entity.Property(e => e.Rsdp1)
                    .HasMaxLength(50)
                    .HasColumnName("RSDP");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<Series>(entity =>
            {
                entity.HasKey(e => new { e.SeriesCode, e.SpecificationName });

                entity.Property(e => e.SeriesCode)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SpecificationName).HasMaxLength(50);

                entity.Property(e => e.SeriesDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<Specification>(entity =>
            {
                entity.HasKey(e => e.Name);

                entity.ToTable("Specification");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<Subcity>(entity =>
            {
                entity.HasKey(e => e.Subcity1);

                entity.ToTable("Subcity");

                entity.Property(e => e.Subcity1)
                    .HasMaxLength(255)
                    .HasColumnName("Subcity");
            });

            modelBuilder.Entity<Supplement>(entity =>
            {
                entity.HasIndex(e => e.ContractId, "IX_Supplements_ContractId");

                entity.Property(e => e.SupplementAmount).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.Supplements)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_Supplements_Contracts_ContractId");
            });

            modelBuilder.Entity<TacReleasedTender>(entity =>
            {
                entity.HasKey(e => e.ReleaseId);

                entity.ToTable("TacReleasedTender");

                entity.HasIndex(e => e.TenderId, "IX_TenderID")
                    .IsUnique();

                entity.Property(e => e.ReleaseId).HasColumnName("ReleaseID");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.DateReleased).HasColumnType("datetime");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.MinuteReference).HasMaxLength(100);

                entity.Property(e => e.ReleasedBy).HasMaxLength(256);

                entity.Property(e => e.TenderId).HasColumnName("TenderID");

                entity.Property(e => e.TenderValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WinningBidderId).HasColumnName("WinningBidderID");

                entity.HasOne(d => d.Tender)
                    .WithOne(p => p.TacReleasedTender)
                    .HasForeignKey<TacReleasedTender>(d => d.TenderId)
                    .HasConstraintName("FK_TacReleasedTender_Tender");

                entity.HasOne(d => d.WinningBidder)
                    .WithMany(p => p.TacReleasedTenders)
                    .HasForeignKey(d => d.WinningBidderId)
                    .HasConstraintName("FK_TacReleasedTender_Bidder");
            });

            modelBuilder.Entity<TeamLeaderNote>(entity =>
            {
                entity.HasKey(e => e.NoteId);

                entity.ToTable("TeamLeaderNote");

                entity.Property(e => e.NoteId).HasColumnName("NoteID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CurrentNoteDate).HasColumnType("date");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastNoteDate).HasColumnType("date");

                entity.Property(e => e.Note).HasMaxLength(1000);

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.TeamLeaderNotes)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_TeamLeaderNote_Contract");
            });

            modelBuilder.Entity<Tender>(entity =>
            {
                entity.ToTable("Tender");

                entity.Property(e => e.TenderId).HasColumnName("TenderID");

                entity.Property(e => e.CacSecretaryNote).HasMaxLength(1000);

                entity.Property(e => e.CancelationDate).HasColumnType("date");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.EngineeringEstimateId).HasColumnName("EngineeringEstimateID");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.TenderClosingDate).HasColumnType("datetime");

                entity.Property(e => e.TenderIssueDate).HasColumnType("datetime");

                entity.Property(e => e.TenderName).HasMaxLength(255);

                entity.Property(e => e.TenderNumber).HasMaxLength(255);

                entity.Property(e => e.TenderOpeningDate).HasColumnType("datetime");

                entity.Property(e => e.TenderType).HasMaxLength(50);

                entity.HasOne(d => d.EngineeringEstimate)
                    .WithMany(p => p.Tenders)
                    .HasForeignKey(d => d.EngineeringEstimateId)
                    .HasConstraintName("FK_Tender_EngineeringEstimate");
            });

            modelBuilder.Entity<TenderAssignment>(entity =>
            {
                entity.HasKey(e => e.AssignmentId);

                entity.ToTable("TenderAssignment");

                entity.Property(e => e.AssignmentId).HasColumnName("AssignmentID");

                entity.Property(e => e.AssignedBy).HasMaxLength(256);

                entity.Property(e => e.AssignedTo).HasMaxLength(256);

                entity.Property(e => e.AssignmentDate).HasColumnType("datetime");

                entity.Property(e => e.AssignmentRevocationDate).HasColumnType("datetime");

                entity.Property(e => e.TenderId).HasColumnName("TenderID");
            });

            modelBuilder.Entity<Terrain>(entity =>
            {
                entity.ToTable("Terrain");

                entity.Property(e => e.TerrainId).HasColumnName("TerrainID");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.EngineeringEstimateId).HasColumnName("EngineeringEstimateID");

                entity.Property(e => e.FromKm).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Terrain1)
                    .HasMaxLength(255)
                    .HasColumnName("Terrain");

                entity.Property(e => e.ToKm).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.EngineeringEstimate)
                    .WithMany(p => p.Terrains)
                    .HasForeignKey(d => d.EngineeringEstimateId)
                    .HasConstraintName("FK_Terrain_EngineeringEstimate");
            });

            modelBuilder.Entity<TownsPassed>(entity =>
            {
                entity.HasKey(e => e.TownPassedId);

                entity.ToTable("TownsPassed");

                entity.Property(e => e.TownPassedId).HasColumnName("TownPassedID");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.EngineeringEstimateId).HasColumnName("EngineeringEstimateID");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.TownPassed).HasMaxLength(255);

                entity.HasOne(d => d.EngineeringEstimate)
                    .WithMany(p => p.TownsPasseds)
                    .HasForeignKey(d => d.EngineeringEstimateId)
                    .HasConstraintName("FK_TownsPassed_TownsPassed");
            });

            modelBuilder.Entity<Training>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ProjectName).HasColumnName("projectName");

                entity.Property(e => e.TrainingDate).HasColumnType("date");
            });

            modelBuilder.Entity<TransformedContractValue>(entity =>
            {
                entity.HasKey(e => e.EntryId);

                entity.ToTable("TransformedContractValue");

                entity.HasIndex(e => e.ContractId, "IX_TransformedContractValue")
                    .IsUnique();

                entity.Property(e => e.EntryId).HasColumnName("EntryID");

                entity.Property(e => e.AdditionToContractValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ApprovedClaim).HasColumnType("money");

                entity.Property(e => e.ApprovedEot).HasColumnName("ApprovedEOT");

                entity.Property(e => e.ApprovedFinancialPercentageCompleted).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ApprovedPredictedCompletion).HasColumnType("date");

                entity.Property(e => e.ApprovedPredictedCostExcludingEscalation).HasColumnType("money");

                entity.Property(e => e.ApprovedPredictedCostIncludingVat)
                    .HasColumnType("money")
                    .HasColumnName("ApprovedPredictedCostIncludingVAT");

                entity.Property(e => e.ApprovedVariationOrder).HasColumnType("money");

                entity.Property(e => e.ContractAmountExcludingContingency).HasColumnType("money");

                entity.Property(e => e.ContractAmountExcludingVat)
                    .HasColumnType("money")
                    .HasColumnName("ContractAmountExcludingVAT");

                entity.Property(e => e.ContractAmountIncludingVatandExcludingContingency)
                    .HasColumnType("money")
                    .HasColumnName("ContractAmountIncludingVATandExcludingContingency");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.CriticalActivity).HasMaxLength(256);

                entity.Property(e => e.CumulativePercentageSpentAgainstAnnualBudget).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CumulativeSpentAgainstAnnualBudget).HasColumnType("money");

                entity.Property(e => e.Delay).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DelayDescription).HasMaxLength(60);

                entity.Property(e => e.EquivalentPhysicalWork).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Escalation).HasColumnType("money");

                entity.Property(e => e.GrandTotalExcludingVat)
                    .HasColumnType("money")
                    .HasColumnName("GrandTotalExcludingVAT");

                entity.Property(e => e.GrandTotalIncludingVat)
                    .HasColumnType("money")
                    .HasColumnName("GrandTotalIncludingVAT");

                entity.Property(e => e.ItemRatesIcludeVat).HasColumnName("ItemRatesIcludeVAT");

                entity.Property(e => e.LastMeasurement).HasColumnType("money");

                entity.Property(e => e.LastMeasurementDate).HasColumnType("date");

                entity.Property(e => e.LengthBySurfaceType).HasMaxLength(50);

                entity.Property(e => e.MaxRoadWidth).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MeasureChange).HasColumnType("money");

                entity.Property(e => e.MeasurementLastEditedBy).HasMaxLength(256);

                entity.Property(e => e.OriginalCompletionDate).HasColumnType("date");

                entity.Property(e => e.OriginalContractAmount).HasColumnType("money");

                entity.Property(e => e.OriginalRatePerKm).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OriginalRatePerLane).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OutstandingAdvance).HasColumnType("money");

                entity.Property(e => e.PercentageElapsedAtApproved).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PercentageElapsedAtRecommended).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PredictedIncontractContingency).HasColumnType("money");

                entity.Property(e => e.PredictedRatePerKm).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PredictedRatePerLane).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PredictedUsedContingency).HasColumnType("money");

                entity.Property(e => e.ProgressPerformance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProgressPerformanceMessage).HasMaxLength(150);

                entity.Property(e => e.QuantityChageTotalCost).HasColumnType("money");

                entity.Property(e => e.RecommendedClaim).HasColumnType("money");

                entity.Property(e => e.RecommendedEot).HasColumnName("RecommendedEOT");

                entity.Property(e => e.RecommendedFinancialPercentageCompleted).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RecommendedPredictedCompletion).HasColumnType("date");

                entity.Property(e => e.RecommendedPredictedCostExcludingEscalation).HasColumnType("money");

                entity.Property(e => e.RecommendedPredictedCostIncludingVat)
                    .HasColumnType("money")
                    .HasColumnName("RecommendedPredictedCostIncludingVAT");

                entity.Property(e => e.RecommendedVariationOrder).HasColumnType("money");

                entity.Property(e => e.RequestedClaim).HasColumnType("money");

                entity.Property(e => e.RequestedEot).HasColumnName("RequestedEOT");

                entity.Property(e => e.RequestedPredictedCompletion).HasColumnType("date");

                entity.Property(e => e.RequestedPredictedCostExcludingEscalation).HasColumnType("money");

                entity.Property(e => e.RequestedPredictedCostIncludingVat)
                    .HasColumnType("money")
                    .HasColumnName("RequestedPredictedCostIncludingVAT");

                entity.Property(e => e.RequestedVariationOrder).HasColumnType("money");

                entity.Property(e => e.Retention).HasColumnType("money");

                entity.Property(e => e.RevisedCompletionDate).HasColumnType("date");

                entity.Property(e => e.TeamLeaderNote).HasMaxLength(256);

                entity.Property(e => e.TeamLeaderNoteDate).HasColumnType("date");

                entity.Property(e => e.TeamLeaderUserName).HasMaxLength(256);

                entity.Property(e => e.TotalRoadLength).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Vat)
                    .HasColumnType("money")
                    .HasColumnName("VAT");
            });

            modelBuilder.Entity<Unit>(entity =>
            {
                entity.ToTable("Unit");

                entity.HasIndex(e => e.PropertyTypeId, "IX_Unit_PropertyTypeId");

                entity.HasOne(d => d.PropertyType)
                    .WithMany(p => p.Units)
                    .HasForeignKey(d => d.PropertyTypeId);
            });

            modelBuilder.Entity<UnitMeasure>(entity =>
            {
                entity.HasKey(e => e.UnitMeasure1);

                entity.ToTable("UnitMeasure");

                entity.Property(e => e.UnitMeasure1)
                    .HasMaxLength(50)
                    .HasColumnName("UnitMeasure");
            });

            modelBuilder.Entity<UtilContract>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("utilContract");

                entity.Property(e => e.ContractId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ContractID");

                entity.Property(e => e.ContractName).IsRequired();

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractType).HasMaxLength(50);

                entity.Property(e => e.ControllingRegion).HasMaxLength(20);

                entity.Property(e => e.DesignContractId).HasColumnName("DesignContractID");

                entity.Property(e => e.EngineeringEstimateId).HasColumnName("EngineeringEstimateID");

                entity.Property(e => e.WorkContractId).HasColumnName("WorkContractID");
            });

            modelBuilder.Entity<VariationOrder>(entity =>
            {
                entity.ToTable("VariationOrder");

                entity.Property(e => e.VariationOrderId).HasColumnName("VariationOrderID");

                entity.Property(e => e.Activity).HasMaxLength(255);

                entity.Property(e => e.ArbitratorDecision).HasColumnType("money");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.ContractorEstimatedAdditionalCost).HasColumnType("money");

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DateDreApproved).HasColumnType("date");

                entity.Property(e => e.DateErApproved).HasColumnType("date");

                entity.Property(e => e.DreEstimatedAdditionalCost).HasColumnType("money");

                entity.Property(e => e.ErEstimatedAdditionalCost).HasColumnType("money");

                entity.Property(e => e.FurtherDetail).HasMaxLength(255);

                entity.Property(e => e.IsReferedToDre).HasColumnName("IsReferedToDRE");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.NecessaryOrAppropriate).HasMaxLength(15);

                entity.Property(e => e.ReasonForIssue).HasMaxLength(255);

                entity.Property(e => e.VariationOrderNumber).HasMaxLength(100);

                entity.HasOne(d => d.ActivityNavigation)
                    .WithMany(p => p.VariationOrders)
                    .HasForeignKey(d => d.Activity)
                    .HasConstraintName("FK_VariationOrder_ConstructionActivityLookup");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.VariationOrders)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("FK_VariationOrder_Contract");

                entity.HasOne(d => d.ReasonForIssueNavigation)
                    .WithMany(p => p.VariationOrders)
                    .HasForeignKey(d => d.ReasonForIssue)
                    .HasConstraintName("FK_VariationOrder_VariationOrderCategory");
            });

            modelBuilder.Entity<VariationOrderCategory>(entity =>
            {
                entity.HasKey(e => e.Category);

                entity.ToTable("VariationOrderCategory");

                entity.Property(e => e.Category).HasMaxLength(255);
            });

            modelBuilder.Entity<VariationOrderSubcategory>(entity =>
            {
                entity.HasKey(e => e.SubCategoryId);

                entity.ToTable("VariationOrderSubcategory");

                entity.Property(e => e.SubCategoryId).HasColumnName("SubCategoryID");

                entity.Property(e => e.Category).HasMaxLength(255);

                entity.Property(e => e.Subcategory).HasMaxLength(255);

                entity.HasOne(d => d.CategoryNavigation)
                    .WithMany(p => p.VariationOrderSubcategories)
                    .HasForeignKey(d => d.Category)
                    .HasConstraintName("FK_VariationOrderSubcategory_VariationOrderCategory");
            });

            modelBuilder.Entity<Vat>(entity =>
            {
                entity.ToTable("VAT");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.LastEditedBy).HasMaxLength(256);

                entity.Property(e => e.LastModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Rate).HasColumnType("decimal(5, 2)");
            });

            modelBuilder.Entity<VatInclusiveColumenUpdateForPawe>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VatInclusiveColumenUpdateForPawe...");

                entity.Property(e => e.ContractName).IsRequired();

                entity.Property(e => e.ContractNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContractType).HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

                entity.Property(e => e.Vat)
                    .HasColumnType("money")
                    .HasColumnName("VAT");

                entity.Property(e => e.VatRate).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ViewRateEquipment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_RateEquipment");

                entity.Property(e => e.EquipmentCost)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("Equipment Cost");

                entity.Property(e => e.EquipmentRate)
                    .HasColumnType("decimal(38, 20)")
                    .HasColumnName("Equipment Rate");

                entity.Property(e => e.ItemCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PerformanceRate)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("Performance Rate");
            });

            modelBuilder.Entity<WinningBid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("WinningBid");

                entity.Property(e => e.BidderId).HasColumnName("BidderID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.Property(e => e.EngineeringEstimateId).HasColumnName("EngineeringEstimateID");

                entity.Property(e => e.TenderId).HasColumnName("TenderID");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}