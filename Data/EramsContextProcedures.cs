// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using ERAManagementSystem.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace ERAManagementSystem.Data
{
    public partial class EramsContext
    {
        private EramsContextProcedures _procedures;

        public virtual EramsContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new EramsContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public EramsContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<aspnet_AnyDataInTablesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Applications_CreateApplicationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_CheckSchemaVersionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Membership_ChangePasswordQuestionAndAnswerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Membership_CreateUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Membership_FindUsersByEmailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Membership_FindUsersByNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Membership_GetAllUsersResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Membership_GetNumberOfUsersOnlineResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Membership_GetPasswordResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Membership_GetPasswordWithFormatResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Membership_GetUserByEmailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Membership_GetUserByNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Membership_GetUserByUserIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Membership_ResetPasswordResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Membership_SetPasswordResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Membership_UnlockUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Membership_UpdateUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Membership_UpdateUserInfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Paths_CreatePathResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Personalization_GetApplicationIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_PersonalizationAdministration_DeleteAllStateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_PersonalizationAdministration_FindStateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_PersonalizationAdministration_GetCountOfStateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_PersonalizationAdministration_ResetSharedStateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_PersonalizationAdministration_ResetUserStateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_PersonalizationAllUsers_GetPageSettingsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_PersonalizationAllUsers_ResetPageSettingsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_PersonalizationAllUsers_SetPageSettingsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_PersonalizationPerUser_GetPageSettingsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_PersonalizationPerUser_ResetPageSettingsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_PersonalizationPerUser_SetPageSettingsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Profile_DeleteInactiveProfilesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Profile_DeleteProfilesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Profile_GetNumberOfInactiveProfilesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Profile_GetProfilesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Profile_GetPropertiesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Profile_SetPropertiesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_RegisterSchemaVersionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Roles_CreateRoleResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Roles_DeleteRoleResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Roles_GetAllRolesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Roles_RoleExistsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Setup_RemoveAllRoleMembersResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Setup_RestorePermissionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_UnRegisterSchemaVersionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Users_CreateUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_Users_DeleteUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_UsersInRoles_AddUsersToRolesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_UsersInRoles_FindUsersInRoleResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_UsersInRoles_GetRolesForUserResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_UsersInRoles_GetUsersInRolesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_UsersInRoles_IsUserInRoleResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_UsersInRoles_RemoveUsersFromRolesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<aspnet_WebEvent_LogEventResult>().HasNoKey().ToView(null);
        }
    }

    public interface IEramsContextProceduresContract
    {
        Task<int> aspnet_AnyDataInTablesAsync(int? TablesToCheck, CancellationToken cancellationToken = default);
        Task<int> aspnet_Applications_CreateApplicationAsync(string ApplicationName, CancellationToken cancellationToken = default);
        Task<int> aspnet_CheckSchemaVersionAsync(string Feature, string CompatibleSchemaVersion, CancellationToken cancellationToken = default);
        Task<int> aspnet_Membership_ChangePasswordQuestionAndAnswerAsync(string ApplicationName, string UserName, string NewPasswordQuestion, string NewPasswordAnswer, CancellationToken cancellationToken = default);
        Task<int> aspnet_Membership_CreateUserAsync(string ApplicationName, string UserName, string Password, string PasswordSalt, string Email, string PasswordQuestion, string PasswordAnswer, bool? IsApproved, DateTime? CurrentTimeUtc, DateTime? CreateDate, int? UniqueEmail, int? PasswordFormat, CancellationToken cancellationToken = default);
        Task<List<aspnet_Membership_FindUsersByEmailResult>> aspnet_Membership_FindUsersByEmailAsync(string ApplicationName, string EmailToMatch, int? PageIndex, int? PageSize, CancellationToken cancellationToken = default);
        Task<List<aspnet_Membership_FindUsersByNameResult>> aspnet_Membership_FindUsersByNameAsync(string ApplicationName, string UserNameToMatch, int? PageIndex, int? PageSize, CancellationToken cancellationToken = default);
        Task<List<aspnet_Membership_GetAllUsersResult>> aspnet_Membership_GetAllUsersAsync(string ApplicationName, int? PageIndex, int? PageSize, CancellationToken cancellationToken = default);
        Task<int> aspnet_Membership_GetNumberOfUsersOnlineAsync(string ApplicationName, int? MinutesSinceLastInActive, DateTime? CurrentTimeUtc, CancellationToken cancellationToken = default);
        Task<int> aspnet_Membership_GetPasswordAsync(string ApplicationName, string UserName, int? MaxInvalidPasswordAttempts, int? PasswordAttemptWindow, DateTime? CurrentTimeUtc, string PasswordAnswer, CancellationToken cancellationToken = default);
        Task<int> aspnet_Membership_GetPasswordWithFormatAsync(string ApplicationName, string UserName, bool? UpdateLastLoginActivityDate, DateTime? CurrentTimeUtc, CancellationToken cancellationToken = default);
        Task<List<aspnet_Membership_GetUserByEmailResult>> aspnet_Membership_GetUserByEmailAsync(string ApplicationName, string Email, CancellationToken cancellationToken = default);
        Task<List<aspnet_Membership_GetUserByNameResult>> aspnet_Membership_GetUserByNameAsync(string ApplicationName, string UserName, DateTime? CurrentTimeUtc, bool? UpdateLastActivity, CancellationToken cancellationToken = default);
        Task<List<aspnet_Membership_GetUserByUserIdResult>> aspnet_Membership_GetUserByUserIdAsync(Guid? UserId, DateTime? CurrentTimeUtc, bool? UpdateLastActivity, CancellationToken cancellationToken = default);
        Task<int> aspnet_Membership_ResetPasswordAsync(string ApplicationName, string UserName, string NewPassword, int? MaxInvalidPasswordAttempts, int? PasswordAttemptWindow, string PasswordSalt, DateTime? CurrentTimeUtc, int? PasswordFormat, string PasswordAnswer, CancellationToken cancellationToken = default);
        Task<int> aspnet_Membership_SetPasswordAsync(string ApplicationName, string UserName, string NewPassword, string PasswordSalt, DateTime? CurrentTimeUtc, int? PasswordFormat, CancellationToken cancellationToken = default);
        Task<int> aspnet_Membership_UnlockUserAsync(string ApplicationName, string UserName, CancellationToken cancellationToken = default);
        Task<int> aspnet_Membership_UpdateUserAsync(string ApplicationName, string UserName, string Email, string Comment, bool? IsApproved, DateTime? LastLoginDate, DateTime? LastActivityDate, int? UniqueEmail, DateTime? CurrentTimeUtc, CancellationToken cancellationToken = default);
        Task<int> aspnet_Membership_UpdateUserInfoAsync(string ApplicationName, string UserName, bool? IsPasswordCorrect, bool? UpdateLastLoginActivityDate, int? MaxInvalidPasswordAttempts, int? PasswordAttemptWindow, DateTime? CurrentTimeUtc, DateTime? LastLoginDate, DateTime? LastActivityDate, CancellationToken cancellationToken = default);
        Task<int> aspnet_Paths_CreatePathAsync(Guid? ApplicationId, string Path, CancellationToken cancellationToken = default);
        Task<int> aspnet_Personalization_GetApplicationIdAsync(string ApplicationName, CancellationToken cancellationToken = default);
        Task<int> aspnet_PersonalizationAdministration_DeleteAllStateAsync(bool? AllUsersScope, string ApplicationName, CancellationToken cancellationToken = default);
        Task<List<aspnet_PersonalizationAdministration_FindStateResult>> aspnet_PersonalizationAdministration_FindStateAsync(bool? AllUsersScope, string ApplicationName, int? PageIndex, int? PageSize, string Path, string UserName, DateTime? InactiveSinceDate, CancellationToken cancellationToken = default);
        Task<int> aspnet_PersonalizationAdministration_GetCountOfStateAsync(bool? AllUsersScope, string ApplicationName, string Path, string UserName, DateTime? InactiveSinceDate, CancellationToken cancellationToken = default);
        Task<int> aspnet_PersonalizationAdministration_ResetSharedStateAsync(string ApplicationName, string Path, CancellationToken cancellationToken = default);
        Task<int> aspnet_PersonalizationAdministration_ResetUserStateAsync(string ApplicationName, DateTime? InactiveSinceDate, string UserName, string Path, CancellationToken cancellationToken = default);
        Task<List<aspnet_PersonalizationAllUsers_GetPageSettingsResult>> aspnet_PersonalizationAllUsers_GetPageSettingsAsync(string ApplicationName, string Path, CancellationToken cancellationToken = default);
        Task<int> aspnet_PersonalizationAllUsers_ResetPageSettingsAsync(string ApplicationName, string Path, CancellationToken cancellationToken = default);
        Task<int> aspnet_PersonalizationAllUsers_SetPageSettingsAsync(string ApplicationName, string Path, byte[] PageSettings, DateTime? CurrentTimeUtc, CancellationToken cancellationToken = default);
        Task<List<aspnet_PersonalizationPerUser_GetPageSettingsResult>> aspnet_PersonalizationPerUser_GetPageSettingsAsync(string ApplicationName, string UserName, string Path, DateTime? CurrentTimeUtc, CancellationToken cancellationToken = default);
        Task<int> aspnet_PersonalizationPerUser_ResetPageSettingsAsync(string ApplicationName, string UserName, string Path, DateTime? CurrentTimeUtc, CancellationToken cancellationToken = default);
        Task<int> aspnet_PersonalizationPerUser_SetPageSettingsAsync(string ApplicationName, string UserName, string Path, byte[] PageSettings, DateTime? CurrentTimeUtc, CancellationToken cancellationToken = default);
        Task<int> aspnet_Profile_DeleteInactiveProfilesAsync(string ApplicationName, int? ProfileAuthOptions, DateTime? InactiveSinceDate, CancellationToken cancellationToken = default);
        Task<int> aspnet_Profile_DeleteProfilesAsync(string ApplicationName, string UserNames, CancellationToken cancellationToken = default);
        Task<int> aspnet_Profile_GetNumberOfInactiveProfilesAsync(string ApplicationName, int? ProfileAuthOptions, DateTime? InactiveSinceDate, CancellationToken cancellationToken = default);
        Task<List<aspnet_Profile_GetProfilesResult>> aspnet_Profile_GetProfilesAsync(string ApplicationName, int? ProfileAuthOptions, int? PageIndex, int? PageSize, string UserNameToMatch, DateTime? InactiveSinceDate, CancellationToken cancellationToken = default);
        Task<List<aspnet_Profile_GetPropertiesResult>> aspnet_Profile_GetPropertiesAsync(string ApplicationName, string UserName, DateTime? CurrentTimeUtc, CancellationToken cancellationToken = default);
        Task<int> aspnet_Profile_SetPropertiesAsync(string ApplicationName, string PropertyNames, string PropertyValuesString, byte[] PropertyValuesBinary, string UserName, bool? IsUserAnonymous, DateTime? CurrentTimeUtc, CancellationToken cancellationToken = default);
        Task<int> aspnet_RegisterSchemaVersionAsync(string Feature, string CompatibleSchemaVersion, bool? IsCurrentVersion, bool? RemoveIncompatibleSchema, CancellationToken cancellationToken = default);
        Task<int> aspnet_Roles_CreateRoleAsync(string ApplicationName, string RoleName, CancellationToken cancellationToken = default);
        Task<int> aspnet_Roles_DeleteRoleAsync(string ApplicationName, string RoleName, bool? DeleteOnlyIfRoleIsEmpty, CancellationToken cancellationToken = default);
        Task<List<aspnet_Roles_GetAllRolesResult>> aspnet_Roles_GetAllRolesAsync(string ApplicationName, CancellationToken cancellationToken = default);
        Task<int> aspnet_Roles_RoleExistsAsync(string ApplicationName, string RoleName, CancellationToken cancellationToken = default);
        Task<List<aspnet_Setup_RemoveAllRoleMembersResult>> aspnet_Setup_RemoveAllRoleMembersAsync(string name, CancellationToken cancellationToken = default);
        Task<List<aspnet_Setup_RestorePermissionsResult>> aspnet_Setup_RestorePermissionsAsync(string name, CancellationToken cancellationToken = default);
        Task<int> aspnet_UnRegisterSchemaVersionAsync(string Feature, string CompatibleSchemaVersion, CancellationToken cancellationToken = default);
        Task<int> aspnet_Users_CreateUserAsync(Guid? ApplicationId, string UserName, bool? IsUserAnonymous, DateTime? LastActivityDate, CancellationToken cancellationToken = default);
        Task<int> aspnet_Users_DeleteUserAsync(string ApplicationName, string UserName, int? TablesToDeleteFrom, CancellationToken cancellationToken = default);
        Task<List<aspnet_UsersInRoles_AddUsersToRolesResult>> aspnet_UsersInRoles_AddUsersToRolesAsync(string ApplicationName, string UserNames, string RoleNames, DateTime? CurrentTimeUtc, CancellationToken cancellationToken = default);
        Task<List<aspnet_UsersInRoles_FindUsersInRoleResult>> aspnet_UsersInRoles_FindUsersInRoleAsync(string ApplicationName, string RoleName, string UserNameToMatch, CancellationToken cancellationToken = default);
        Task<List<aspnet_UsersInRoles_GetRolesForUserResult>> aspnet_UsersInRoles_GetRolesForUserAsync(string ApplicationName, string UserName, CancellationToken cancellationToken = default);
        Task<List<aspnet_UsersInRoles_GetUsersInRolesResult>> aspnet_UsersInRoles_GetUsersInRolesAsync(string ApplicationName, string RoleName, CancellationToken cancellationToken = default);
        Task<int> aspnet_UsersInRoles_IsUserInRoleAsync(string ApplicationName, string UserName, string RoleName, CancellationToken cancellationToken = default);
        Task<int> aspnet_UsersInRoles_RemoveUsersFromRolesAsync(string ApplicationName, string UserNames, string RoleNames, CancellationToken cancellationToken = default);
        Task<int> aspnet_WebEvent_LogEventAsync(string EventId, DateTime? EventTimeUtc, DateTime? EventTime, string EventType, decimal? EventSequence, decimal? EventOccurrence, int? EventCode, int? EventDetailCode, string Message, string ApplicationPath, string ApplicationVirtualPath, string MachineName, string RequestUrl, string ExceptionType, string Details, CancellationToken cancellationToken = default);
    }

    public partial class EramsContextProcedures
    {
        private readonly EramsContext _context;

        public EramsContextProcedures(EramsContext context)
        {
            _context = context;
        }

        public virtual async Task<int> aspnet_AnyDataInTablesAsync(int? TablesToCheck, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TablesToCheck",
                    Value = TablesToCheck ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_AnyDataInTables] @TablesToCheck", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Applications_CreateApplicationAsync(string ApplicationName, OutputParameter<Guid?> ApplicationId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterApplicationId = new SqlParameter
            {
                ParameterName = "ApplicationId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ApplicationId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterApplicationId,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Applications_CreateApplication] @ApplicationName, @ApplicationId OUTPUT", sqlParameters, cancellationToken);

            ApplicationId.SetValue(parameterApplicationId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_CheckSchemaVersionAsync(string Feature, string CompatibleSchemaVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Feature",
                    Size = 256,
                    Value = Feature ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompatibleSchemaVersion",
                    Size = 256,
                    Value = CompatibleSchemaVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_CheckSchemaVersion] @Feature, @CompatibleSchemaVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Membership_ChangePasswordQuestionAndAnswerAsync(string ApplicationName, string UserName, string NewPasswordQuestion, string NewPasswordAnswer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NewPasswordQuestion",
                    Size = 512,
                    Value = NewPasswordQuestion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NewPasswordAnswer",
                    Size = 256,
                    Value = NewPasswordAnswer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Membership_ChangePasswordQuestionAndAnswer] @ApplicationName, @UserName, @NewPasswordQuestion, @NewPasswordAnswer", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Membership_CreateUserAsync(string ApplicationName, string UserName, string Password, string PasswordSalt, string Email, string PasswordQuestion, string PasswordAnswer, bool? IsApproved, DateTime? CurrentTimeUtc, DateTime? CreateDate, int? UniqueEmail, int? PasswordFormat, OutputParameter<Guid?> UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterUserId = new SqlParameter
            {
                ParameterName = "UserId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = UserId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 256,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordSalt",
                    Size = 256,
                    Value = PasswordSalt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 512,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordQuestion",
                    Size = 512,
                    Value = PasswordQuestion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordAnswer",
                    Size = 256,
                    Value = PasswordAnswer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsApproved",
                    Value = IsApproved ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentTimeUtc",
                    Value = CurrentTimeUtc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CreateDate",
                    Value = CreateDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UniqueEmail",
                    Value = UniqueEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordFormat",
                    Value = PasswordFormat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterUserId,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Membership_CreateUser] @ApplicationName, @UserName, @Password, @PasswordSalt, @Email, @PasswordQuestion, @PasswordAnswer, @IsApproved, @CurrentTimeUtc, @CreateDate, @UniqueEmail, @PasswordFormat, @UserId OUTPUT", sqlParameters, cancellationToken);

            UserId.SetValue(parameterUserId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<aspnet_Membership_FindUsersByEmailResult>> aspnet_Membership_FindUsersByEmailAsync(string ApplicationName, string EmailToMatch, int? PageIndex, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmailToMatch",
                    Size = 512,
                    Value = EmailToMatch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageIndex",
                    Value = PageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<aspnet_Membership_FindUsersByEmailResult>("EXEC @returnValue = [dbo].[aspnet_Membership_FindUsersByEmail] @ApplicationName, @EmailToMatch, @PageIndex, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<aspnet_Membership_FindUsersByNameResult>> aspnet_Membership_FindUsersByNameAsync(string ApplicationName, string UserNameToMatch, int? PageIndex, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserNameToMatch",
                    Size = 512,
                    Value = UserNameToMatch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageIndex",
                    Value = PageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<aspnet_Membership_FindUsersByNameResult>("EXEC @returnValue = [dbo].[aspnet_Membership_FindUsersByName] @ApplicationName, @UserNameToMatch, @PageIndex, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<aspnet_Membership_GetAllUsersResult>> aspnet_Membership_GetAllUsersAsync(string ApplicationName, int? PageIndex, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageIndex",
                    Value = PageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<aspnet_Membership_GetAllUsersResult>("EXEC @returnValue = [dbo].[aspnet_Membership_GetAllUsers] @ApplicationName, @PageIndex, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Membership_GetNumberOfUsersOnlineAsync(string ApplicationName, int? MinutesSinceLastInActive, DateTime? CurrentTimeUtc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MinutesSinceLastInActive",
                    Value = MinutesSinceLastInActive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentTimeUtc",
                    Value = CurrentTimeUtc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Membership_GetNumberOfUsersOnline] @ApplicationName, @MinutesSinceLastInActive, @CurrentTimeUtc", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Membership_GetPasswordAsync(string ApplicationName, string UserName, int? MaxInvalidPasswordAttempts, int? PasswordAttemptWindow, DateTime? CurrentTimeUtc, string PasswordAnswer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaxInvalidPasswordAttempts",
                    Value = MaxInvalidPasswordAttempts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordAttemptWindow",
                    Value = PasswordAttemptWindow ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentTimeUtc",
                    Value = CurrentTimeUtc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordAnswer",
                    Size = 256,
                    Value = PasswordAnswer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Membership_GetPassword] @ApplicationName, @UserName, @MaxInvalidPasswordAttempts, @PasswordAttemptWindow, @CurrentTimeUtc, @PasswordAnswer", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Membership_GetPasswordWithFormatAsync(string ApplicationName, string UserName, bool? UpdateLastLoginActivityDate, DateTime? CurrentTimeUtc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UpdateLastLoginActivityDate",
                    Value = UpdateLastLoginActivityDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentTimeUtc",
                    Value = CurrentTimeUtc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Membership_GetPasswordWithFormat] @ApplicationName, @UserName, @UpdateLastLoginActivityDate, @CurrentTimeUtc", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<aspnet_Membership_GetUserByEmailResult>> aspnet_Membership_GetUserByEmailAsync(string ApplicationName, string Email, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 512,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<aspnet_Membership_GetUserByEmailResult>("EXEC @returnValue = [dbo].[aspnet_Membership_GetUserByEmail] @ApplicationName, @Email", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<aspnet_Membership_GetUserByNameResult>> aspnet_Membership_GetUserByNameAsync(string ApplicationName, string UserName, DateTime? CurrentTimeUtc, bool? UpdateLastActivity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentTimeUtc",
                    Value = CurrentTimeUtc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UpdateLastActivity",
                    Value = UpdateLastActivity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<aspnet_Membership_GetUserByNameResult>("EXEC @returnValue = [dbo].[aspnet_Membership_GetUserByName] @ApplicationName, @UserName, @CurrentTimeUtc, @UpdateLastActivity", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<aspnet_Membership_GetUserByUserIdResult>> aspnet_Membership_GetUserByUserIdAsync(Guid? UserId, DateTime? CurrentTimeUtc, bool? UpdateLastActivity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentTimeUtc",
                    Value = CurrentTimeUtc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UpdateLastActivity",
                    Value = UpdateLastActivity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<aspnet_Membership_GetUserByUserIdResult>("EXEC @returnValue = [dbo].[aspnet_Membership_GetUserByUserId] @UserId, @CurrentTimeUtc, @UpdateLastActivity", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Membership_ResetPasswordAsync(string ApplicationName, string UserName, string NewPassword, int? MaxInvalidPasswordAttempts, int? PasswordAttemptWindow, string PasswordSalt, DateTime? CurrentTimeUtc, int? PasswordFormat, string PasswordAnswer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NewPassword",
                    Size = 256,
                    Value = NewPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaxInvalidPasswordAttempts",
                    Value = MaxInvalidPasswordAttempts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordAttemptWindow",
                    Value = PasswordAttemptWindow ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordSalt",
                    Size = 256,
                    Value = PasswordSalt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentTimeUtc",
                    Value = CurrentTimeUtc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordFormat",
                    Value = PasswordFormat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordAnswer",
                    Size = 256,
                    Value = PasswordAnswer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Membership_ResetPassword] @ApplicationName, @UserName, @NewPassword, @MaxInvalidPasswordAttempts, @PasswordAttemptWindow, @PasswordSalt, @CurrentTimeUtc, @PasswordFormat, @PasswordAnswer", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Membership_SetPasswordAsync(string ApplicationName, string UserName, string NewPassword, string PasswordSalt, DateTime? CurrentTimeUtc, int? PasswordFormat, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NewPassword",
                    Size = 256,
                    Value = NewPassword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordSalt",
                    Size = 256,
                    Value = PasswordSalt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentTimeUtc",
                    Value = CurrentTimeUtc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordFormat",
                    Value = PasswordFormat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Membership_SetPassword] @ApplicationName, @UserName, @NewPassword, @PasswordSalt, @CurrentTimeUtc, @PasswordFormat", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Membership_UnlockUserAsync(string ApplicationName, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Membership_UnlockUser] @ApplicationName, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Membership_UpdateUserAsync(string ApplicationName, string UserName, string Email, string Comment, bool? IsApproved, DateTime? LastLoginDate, DateTime? LastActivityDate, int? UniqueEmail, DateTime? CurrentTimeUtc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 512,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Comment",
                    Value = Comment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NText,
                },
                new SqlParameter
                {
                    ParameterName = "IsApproved",
                    Value = IsApproved ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "LastLoginDate",
                    Value = LastLoginDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastActivityDate",
                    Value = LastActivityDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UniqueEmail",
                    Value = UniqueEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentTimeUtc",
                    Value = CurrentTimeUtc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Membership_UpdateUser] @ApplicationName, @UserName, @Email, @Comment, @IsApproved, @LastLoginDate, @LastActivityDate, @UniqueEmail, @CurrentTimeUtc", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Membership_UpdateUserInfoAsync(string ApplicationName, string UserName, bool? IsPasswordCorrect, bool? UpdateLastLoginActivityDate, int? MaxInvalidPasswordAttempts, int? PasswordAttemptWindow, DateTime? CurrentTimeUtc, DateTime? LastLoginDate, DateTime? LastActivityDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsPasswordCorrect",
                    Value = IsPasswordCorrect ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UpdateLastLoginActivityDate",
                    Value = UpdateLastLoginActivityDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "MaxInvalidPasswordAttempts",
                    Value = MaxInvalidPasswordAttempts ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordAttemptWindow",
                    Value = PasswordAttemptWindow ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentTimeUtc",
                    Value = CurrentTimeUtc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastLoginDate",
                    Value = LastLoginDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastActivityDate",
                    Value = LastActivityDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Membership_UpdateUserInfo] @ApplicationName, @UserName, @IsPasswordCorrect, @UpdateLastLoginActivityDate, @MaxInvalidPasswordAttempts, @PasswordAttemptWindow, @CurrentTimeUtc, @LastLoginDate, @LastActivityDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Paths_CreatePathAsync(Guid? ApplicationId, string Path, OutputParameter<Guid?> PathId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPathId = new SqlParameter
            {
                ParameterName = "PathId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PathId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationId",
                    Value = ApplicationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "Path",
                    Size = 512,
                    Value = Path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterPathId,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Paths_CreatePath] @ApplicationId, @Path, @PathId OUTPUT", sqlParameters, cancellationToken);

            PathId.SetValue(parameterPathId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Personalization_GetApplicationIdAsync(string ApplicationName, OutputParameter<Guid?> ApplicationId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterApplicationId = new SqlParameter
            {
                ParameterName = "ApplicationId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ApplicationId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterApplicationId,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Personalization_GetApplicationId] @ApplicationName, @ApplicationId OUTPUT", sqlParameters, cancellationToken);

            ApplicationId.SetValue(parameterApplicationId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_PersonalizationAdministration_DeleteAllStateAsync(bool? AllUsersScope, string ApplicationName, OutputParameter<int?> Count, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterCount = new SqlParameter
            {
                ParameterName = "Count",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Count?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AllUsersScope",
                    Value = AllUsersScope ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterCount,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_PersonalizationAdministration_DeleteAllState] @AllUsersScope, @ApplicationName, @Count OUTPUT", sqlParameters, cancellationToken);

            Count.SetValue(parameterCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<aspnet_PersonalizationAdministration_FindStateResult>> aspnet_PersonalizationAdministration_FindStateAsync(bool? AllUsersScope, string ApplicationName, int? PageIndex, int? PageSize, string Path, string UserName, DateTime? InactiveSinceDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AllUsersScope",
                    Value = AllUsersScope ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageIndex",
                    Value = PageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Path",
                    Size = 512,
                    Value = Path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InactiveSinceDate",
                    Value = InactiveSinceDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<aspnet_PersonalizationAdministration_FindStateResult>("EXEC @returnValue = [dbo].[aspnet_PersonalizationAdministration_FindState] @AllUsersScope, @ApplicationName, @PageIndex, @PageSize, @Path, @UserName, @InactiveSinceDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_PersonalizationAdministration_GetCountOfStateAsync(bool? AllUsersScope, string ApplicationName, string Path, string UserName, DateTime? InactiveSinceDate, OutputParameter<int?> Count, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterCount = new SqlParameter
            {
                ParameterName = "Count",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Count?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterCount,
                new SqlParameter
                {
                    ParameterName = "AllUsersScope",
                    Value = AllUsersScope ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Path",
                    Size = 512,
                    Value = Path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InactiveSinceDate",
                    Value = InactiveSinceDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_PersonalizationAdministration_GetCountOfState] @Count OUTPUT, @AllUsersScope, @ApplicationName, @Path, @UserName, @InactiveSinceDate", sqlParameters, cancellationToken);

            Count.SetValue(parameterCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_PersonalizationAdministration_ResetSharedStateAsync(string ApplicationName, string Path, OutputParameter<int?> Count, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterCount = new SqlParameter
            {
                ParameterName = "Count",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Count?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterCount,
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Path",
                    Size = 512,
                    Value = Path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_PersonalizationAdministration_ResetSharedState] @Count OUTPUT, @ApplicationName, @Path", sqlParameters, cancellationToken);

            Count.SetValue(parameterCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_PersonalizationAdministration_ResetUserStateAsync(string ApplicationName, DateTime? InactiveSinceDate, string UserName, string Path, OutputParameter<int?> Count, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterCount = new SqlParameter
            {
                ParameterName = "Count",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Count?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterCount,
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InactiveSinceDate",
                    Value = InactiveSinceDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Path",
                    Size = 512,
                    Value = Path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_PersonalizationAdministration_ResetUserState] @Count OUTPUT, @ApplicationName, @InactiveSinceDate, @UserName, @Path", sqlParameters, cancellationToken);

            Count.SetValue(parameterCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<aspnet_PersonalizationAllUsers_GetPageSettingsResult>> aspnet_PersonalizationAllUsers_GetPageSettingsAsync(string ApplicationName, string Path, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Path",
                    Size = 512,
                    Value = Path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<aspnet_PersonalizationAllUsers_GetPageSettingsResult>("EXEC @returnValue = [dbo].[aspnet_PersonalizationAllUsers_GetPageSettings] @ApplicationName, @Path", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_PersonalizationAllUsers_ResetPageSettingsAsync(string ApplicationName, string Path, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Path",
                    Size = 512,
                    Value = Path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_PersonalizationAllUsers_ResetPageSettings] @ApplicationName, @Path", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_PersonalizationAllUsers_SetPageSettingsAsync(string ApplicationName, string Path, byte[] PageSettings, DateTime? CurrentTimeUtc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Path",
                    Size = 512,
                    Value = Path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageSettings",
                    Value = PageSettings ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentTimeUtc",
                    Value = CurrentTimeUtc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_PersonalizationAllUsers_SetPageSettings] @ApplicationName, @Path, @PageSettings, @CurrentTimeUtc", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<aspnet_PersonalizationPerUser_GetPageSettingsResult>> aspnet_PersonalizationPerUser_GetPageSettingsAsync(string ApplicationName, string UserName, string Path, DateTime? CurrentTimeUtc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Path",
                    Size = 512,
                    Value = Path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentTimeUtc",
                    Value = CurrentTimeUtc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<aspnet_PersonalizationPerUser_GetPageSettingsResult>("EXEC @returnValue = [dbo].[aspnet_PersonalizationPerUser_GetPageSettings] @ApplicationName, @UserName, @Path, @CurrentTimeUtc", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_PersonalizationPerUser_ResetPageSettingsAsync(string ApplicationName, string UserName, string Path, DateTime? CurrentTimeUtc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Path",
                    Size = 512,
                    Value = Path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentTimeUtc",
                    Value = CurrentTimeUtc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_PersonalizationPerUser_ResetPageSettings] @ApplicationName, @UserName, @Path, @CurrentTimeUtc", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_PersonalizationPerUser_SetPageSettingsAsync(string ApplicationName, string UserName, string Path, byte[] PageSettings, DateTime? CurrentTimeUtc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Path",
                    Size = 512,
                    Value = Path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageSettings",
                    Value = PageSettings ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentTimeUtc",
                    Value = CurrentTimeUtc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_PersonalizationPerUser_SetPageSettings] @ApplicationName, @UserName, @Path, @PageSettings, @CurrentTimeUtc", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Profile_DeleteInactiveProfilesAsync(string ApplicationName, int? ProfileAuthOptions, DateTime? InactiveSinceDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProfileAuthOptions",
                    Value = ProfileAuthOptions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InactiveSinceDate",
                    Value = InactiveSinceDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Profile_DeleteInactiveProfiles] @ApplicationName, @ProfileAuthOptions, @InactiveSinceDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Profile_DeleteProfilesAsync(string ApplicationName, string UserNames, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserNames",
                    Size = 8000,
                    Value = UserNames ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Profile_DeleteProfiles] @ApplicationName, @UserNames", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Profile_GetNumberOfInactiveProfilesAsync(string ApplicationName, int? ProfileAuthOptions, DateTime? InactiveSinceDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProfileAuthOptions",
                    Value = ProfileAuthOptions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InactiveSinceDate",
                    Value = InactiveSinceDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Profile_GetNumberOfInactiveProfiles] @ApplicationName, @ProfileAuthOptions, @InactiveSinceDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<aspnet_Profile_GetProfilesResult>> aspnet_Profile_GetProfilesAsync(string ApplicationName, int? ProfileAuthOptions, int? PageIndex, int? PageSize, string UserNameToMatch, DateTime? InactiveSinceDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProfileAuthOptions",
                    Value = ProfileAuthOptions ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageIndex",
                    Value = PageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserNameToMatch",
                    Size = 512,
                    Value = UserNameToMatch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InactiveSinceDate",
                    Value = InactiveSinceDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<aspnet_Profile_GetProfilesResult>("EXEC @returnValue = [dbo].[aspnet_Profile_GetProfiles] @ApplicationName, @ProfileAuthOptions, @PageIndex, @PageSize, @UserNameToMatch, @InactiveSinceDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<aspnet_Profile_GetPropertiesResult>> aspnet_Profile_GetPropertiesAsync(string ApplicationName, string UserName, DateTime? CurrentTimeUtc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentTimeUtc",
                    Value = CurrentTimeUtc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<aspnet_Profile_GetPropertiesResult>("EXEC @returnValue = [dbo].[aspnet_Profile_GetProperties] @ApplicationName, @UserName, @CurrentTimeUtc", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Profile_SetPropertiesAsync(string ApplicationName, string PropertyNames, string PropertyValuesString, byte[] PropertyValuesBinary, string UserName, bool? IsUserAnonymous, DateTime? CurrentTimeUtc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PropertyNames",
                    Value = PropertyNames ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NText,
                },
                new SqlParameter
                {
                    ParameterName = "PropertyValuesString",
                    Value = PropertyValuesString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NText,
                },
                new SqlParameter
                {
                    ParameterName = "PropertyValuesBinary",
                    Value = PropertyValuesBinary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsUserAnonymous",
                    Value = IsUserAnonymous ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentTimeUtc",
                    Value = CurrentTimeUtc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Profile_SetProperties] @ApplicationName, @PropertyNames, @PropertyValuesString, @PropertyValuesBinary, @UserName, @IsUserAnonymous, @CurrentTimeUtc", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_RegisterSchemaVersionAsync(string Feature, string CompatibleSchemaVersion, bool? IsCurrentVersion, bool? RemoveIncompatibleSchema, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Feature",
                    Size = 256,
                    Value = Feature ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompatibleSchemaVersion",
                    Size = 256,
                    Value = CompatibleSchemaVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsCurrentVersion",
                    Value = IsCurrentVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "RemoveIncompatibleSchema",
                    Value = RemoveIncompatibleSchema ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_RegisterSchemaVersion] @Feature, @CompatibleSchemaVersion, @IsCurrentVersion, @RemoveIncompatibleSchema", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Roles_CreateRoleAsync(string ApplicationName, string RoleName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RoleName",
                    Size = 512,
                    Value = RoleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Roles_CreateRole] @ApplicationName, @RoleName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Roles_DeleteRoleAsync(string ApplicationName, string RoleName, bool? DeleteOnlyIfRoleIsEmpty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RoleName",
                    Size = 512,
                    Value = RoleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DeleteOnlyIfRoleIsEmpty",
                    Value = DeleteOnlyIfRoleIsEmpty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Roles_DeleteRole] @ApplicationName, @RoleName, @DeleteOnlyIfRoleIsEmpty", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<aspnet_Roles_GetAllRolesResult>> aspnet_Roles_GetAllRolesAsync(string ApplicationName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<aspnet_Roles_GetAllRolesResult>("EXEC @returnValue = [dbo].[aspnet_Roles_GetAllRoles] @ApplicationName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Roles_RoleExistsAsync(string ApplicationName, string RoleName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RoleName",
                    Size = 512,
                    Value = RoleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Roles_RoleExists] @ApplicationName, @RoleName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<aspnet_Setup_RemoveAllRoleMembersResult>> aspnet_Setup_RemoveAllRoleMembersAsync(string name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 256,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<aspnet_Setup_RemoveAllRoleMembersResult>("EXEC @returnValue = [dbo].[aspnet_Setup_RemoveAllRoleMembers] @name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<aspnet_Setup_RestorePermissionsResult>> aspnet_Setup_RestorePermissionsAsync(string name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 256,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<aspnet_Setup_RestorePermissionsResult>("EXEC @returnValue = [dbo].[aspnet_Setup_RestorePermissions] @name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_UnRegisterSchemaVersionAsync(string Feature, string CompatibleSchemaVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Feature",
                    Size = 256,
                    Value = Feature ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompatibleSchemaVersion",
                    Size = 256,
                    Value = CompatibleSchemaVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_UnRegisterSchemaVersion] @Feature, @CompatibleSchemaVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Users_CreateUserAsync(Guid? ApplicationId, string UserName, bool? IsUserAnonymous, DateTime? LastActivityDate, OutputParameter<Guid?> UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterUserId = new SqlParameter
            {
                ParameterName = "UserId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = UserId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationId",
                    Value = ApplicationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsUserAnonymous",
                    Value = IsUserAnonymous ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "LastActivityDate",
                    Value = LastActivityDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterUserId,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Users_CreateUser] @ApplicationId, @UserName, @IsUserAnonymous, @LastActivityDate, @UserId OUTPUT", sqlParameters, cancellationToken);

            UserId.SetValue(parameterUserId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_Users_DeleteUserAsync(string ApplicationName, string UserName, int? TablesToDeleteFrom, OutputParameter<int?> NumTablesDeletedFrom, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterNumTablesDeletedFrom = new SqlParameter
            {
                ParameterName = "NumTablesDeletedFrom",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = NumTablesDeletedFrom?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TablesToDeleteFrom",
                    Value = TablesToDeleteFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterNumTablesDeletedFrom,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_Users_DeleteUser] @ApplicationName, @UserName, @TablesToDeleteFrom, @NumTablesDeletedFrom OUTPUT", sqlParameters, cancellationToken);

            NumTablesDeletedFrom.SetValue(parameterNumTablesDeletedFrom.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<aspnet_UsersInRoles_AddUsersToRolesResult>> aspnet_UsersInRoles_AddUsersToRolesAsync(string ApplicationName, string UserNames, string RoleNames, DateTime? CurrentTimeUtc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserNames",
                    Size = 8000,
                    Value = UserNames ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RoleNames",
                    Size = 8000,
                    Value = RoleNames ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentTimeUtc",
                    Value = CurrentTimeUtc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<aspnet_UsersInRoles_AddUsersToRolesResult>("EXEC @returnValue = [dbo].[aspnet_UsersInRoles_AddUsersToRoles] @ApplicationName, @UserNames, @RoleNames, @CurrentTimeUtc", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<aspnet_UsersInRoles_FindUsersInRoleResult>> aspnet_UsersInRoles_FindUsersInRoleAsync(string ApplicationName, string RoleName, string UserNameToMatch, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RoleName",
                    Size = 512,
                    Value = RoleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserNameToMatch",
                    Size = 512,
                    Value = UserNameToMatch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<aspnet_UsersInRoles_FindUsersInRoleResult>("EXEC @returnValue = [dbo].[aspnet_UsersInRoles_FindUsersInRole] @ApplicationName, @RoleName, @UserNameToMatch", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<aspnet_UsersInRoles_GetRolesForUserResult>> aspnet_UsersInRoles_GetRolesForUserAsync(string ApplicationName, string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<aspnet_UsersInRoles_GetRolesForUserResult>("EXEC @returnValue = [dbo].[aspnet_UsersInRoles_GetRolesForUser] @ApplicationName, @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<aspnet_UsersInRoles_GetUsersInRolesResult>> aspnet_UsersInRoles_GetUsersInRolesAsync(string ApplicationName, string RoleName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RoleName",
                    Size = 512,
                    Value = RoleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<aspnet_UsersInRoles_GetUsersInRolesResult>("EXEC @returnValue = [dbo].[aspnet_UsersInRoles_GetUsersInRoles] @ApplicationName, @RoleName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_UsersInRoles_IsUserInRoleAsync(string ApplicationName, string UserName, string RoleName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RoleName",
                    Size = 512,
                    Value = RoleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_UsersInRoles_IsUserInRole] @ApplicationName, @UserName, @RoleName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_UsersInRoles_RemoveUsersFromRolesAsync(string ApplicationName, string UserNames, string RoleNames, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserNames",
                    Size = 8000,
                    Value = UserNames ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RoleNames",
                    Size = 8000,
                    Value = RoleNames ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_UsersInRoles_RemoveUsersFromRoles] @ApplicationName, @UserNames, @RoleNames", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> aspnet_WebEvent_LogEventAsync(string EventId, DateTime? EventTimeUtc, DateTime? EventTime, string EventType, decimal? EventSequence, decimal? EventOccurrence, int? EventCode, int? EventDetailCode, string Message, string ApplicationPath, string ApplicationVirtualPath, string MachineName, string RequestUrl, string ExceptionType, string Details, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EventId",
                    Size = 32,
                    Value = EventId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EventTimeUtc",
                    Value = EventTimeUtc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EventTime",
                    Value = EventTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EventType",
                    Size = 512,
                    Value = EventType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EventSequence",
                    Precision = 19,
                    Value = EventSequence ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "EventOccurrence",
                    Precision = 19,
                    Value = EventOccurrence ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "EventCode",
                    Value = EventCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EventDetailCode",
                    Value = EventDetailCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Message",
                    Size = 2048,
                    Value = Message ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicationPath",
                    Size = 512,
                    Value = ApplicationPath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicationVirtualPath",
                    Size = 512,
                    Value = ApplicationVirtualPath ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MachineName",
                    Size = 512,
                    Value = MachineName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RequestUrl",
                    Size = 2048,
                    Value = RequestUrl ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ExceptionType",
                    Size = 512,
                    Value = ExceptionType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Details",
                    Value = Details ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NText,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[aspnet_WebEvent_LogEvent] @EventId, @EventTimeUtc, @EventTime, @EventType, @EventSequence, @EventOccurrence, @EventCode, @EventDetailCode, @Message, @ApplicationPath, @ApplicationVirtualPath, @MachineName, @RequestUrl, @ExceptionType, @Details", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
